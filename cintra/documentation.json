{"jest.setup.js": "Description: This file is responsible for mocking the fetch API in Jest tests.\n\nDependencies: None\n\nFunctions:\n- Name: require\n  Description: This function is used to import the 'jest-fetch-mock' module.\n  Parameters: None\n  Returns: None", "public/index.html": "Description: This file is the main HTML template for the SoundTracks web application.\n\nDependencies: reset.css, Poppins and Work Sans fonts, manifest.json, djboticon.png\n\nFunctions: N/A", "public/reset.css": "Description: This file contains a CSS reset code that resets the default styles of HTML elements to ensure consistent rendering across different browsers.\n\nDependencies: None\n\nFunctions:\n- None", "src/components/App/App.css": "Description: This file contains the CSS styles for the application's user interface.\nDependencies: None\nFunctions: None", "src/components/App/App.js": "Description: This file represents the main component of the application, responsible for rendering the user interface and managing the state of the application.\n\nDependencies: \n- React: The JavaScript library used for building the user interface.\n- \"./App.css\": The CSS file containing the styles for the App component.\n- \"./DALL\u00b7E 2023-03-01 20.07.50 - driving down the 101 with the top down.png\": The default album art image.\n- \"../Playlist/Playlist.js\": The Playlist component used to display and manage the user's playlist.\n- \"../SearchBar/SearchBar.js\": The SearchBar component used to search for tracks.\n- \"../SearchResults/SearchResults.js\": The SearchResults component used to display the search results.\n- \"../LoginPage/LoginPage.js\": The LoginPage component used for user authentication.\n- \"../../util/Spotify.js\": The Spotify utility module used for interacting with the Spotify API.\n- \"../../util/OpenAiAPIRequest.js\": The OpenAiAPIRequest module used for making requests to the OpenAI API.\n- \"@fortawesome/free-solid-svg-icons\": The FontAwesomeIcon module used for displaying icons.\n- \"@fortawesome/react-fontawesome\": The FontAwesomeIcon component used for rendering icons.\n\nFunctions:\n- Name: constructor\n  Description: Initializes the state of the App component.\n  Parameters: props (object) - The props passed to the component.\n  Returns: None\n\n- Name: handleLogin\n  Description: Handles the login process by obtaining the access token and updating the state accordingly.\n  Parameters: None\n  Returns: None\n\n- Name: handleLogout\n  Description: Handles the logout process by resetting the state to its initial values.\n  Parameters: None\n  Returns: None\n\n- Name: search\n  Description: Performs a search for tracks using the Spotify API and updates the searchResults state.\n  Parameters: term (string) - The search term.\n  Returns: None\n\n- Name: interpretPrompt\n  Description: Sends a prompt to the OpenAI API for interpretation and logs the response.\n  Parameters: prompt (string) - The prompt to be interpreted.\n  Returns: None\n\n- Name: openAiSearch\n  Description: Performs a search for song recommendations using the OpenAI API and updates the searchResults state.\n  Parameters: prompt (string) - The prompt for generating song recommendations.\n  Returns: None\n\n- Name: generatePlaylistName\n  Description: Generates a playlist name using the OpenAI API and updates the playlistName state.\n  Parameters: prompt (string) - The prompt for generating the playlist name.\n  Returns: Promise<string> - The generated playlist name.\n\n- Name: generateAlbumArt\n  Description: Generates album art using the OpenAI API and updates the albumArt state.\n  Parameters: playlistName (string) - The playlist name used for generating the album art.\n  Returns: Promise<string> - The generated album art URL.\n\n- Name: removeDuplicateTracks\n  Description: Removes duplicate tracks from an array of tracks.\n  Parameters: tracks (array) - The array of tracks.\n  Returns: array - The array of tracks without duplicates.\n\n- Name: addTrack\n  Description: Adds a track to the playlistTracks state and removes it from the searchResults state.\n  Parameters: track (object) - The track to be added.\n  Returns: None\n\n- Name: toggleTrack\n  Description: Toggles the playback of a track.\n  Parameters: track (object) - The track to be played or paused.\n  Returns: None\n\n- Name: componentDidMount\n  Description: Executes after the component has been rendered to the DOM and performs initial setup tasks.\n  Parameters: None\n  Returns: None\n\n- Name: removeTrack\n  Description: Removes a track from the playlistTracks state and adds it back to the searchResults state.\n  Parameters: track (object) - The track to be removed.\n  Returns: None\n\n- Name: updatePlaylistName\n  Description: Updates the playlistName state with the provided name.\n  Parameters: name (string) - The new playlist name.\n  Returns: None\n\n- Name: savePlaylist\n  Description: Saves the playlist by calling the Spotify API to create a new playlist and add the tracks to it.\n  Parameters: None\n  Returns: None\n\n- Name: setToSearchState\n  Description: Sets the searchState state to true.\n  Parameters: event (object) - The event object.\n  Returns: None\n\n- Name: setToPlaylistState\n  Description: Sets the searchState state to false.\n  Parameters: event (object) - The event object.\n  Returns: None\n\n- Name: render\n  Description: Renders the user interface based on the current state of the component.\n  Parameters: None\n  Returns: JSX - The rendered user interface.", "src/components/LoginPage/LoginPage.css": "Description: This file defines the styling and layout for the login page of the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None", "src/components/LoginPage/LoginPage.js": "Description: This file represents the login page component of the application, responsible for rendering the login form and handling user authentication.\nDependencies: React, './LoginPage.css'\nFunctions:\n- Name: LoginPage\n  Description: A functional component that renders the login page UI.\n  Parameters: onLogin (function) - A callback function to be executed when the login button is clicked.\n  Returns: JSX - The rendered login page UI.\n\nNo additional functions or classes are contained in this file.", "src/components/Playlist/Playlist.css": "Description: This file defines the styles and layout for the Playlist component in the application.\n\nDependencies: None\n\nFunctions:\n- None", "src/components/Playlist/Playlist.js": "Description: This file represents the Playlist component in the application, responsible for rendering a playlist with its associated tracklist and providing functionality for saving the playlist to Spotify.\nDependencies: React, \"./Playlist.css\", \"../TrackList/TrackList.js\"\nFunctions:\n- Name: constructor\n  Description: Initializes the state of the Playlist component with the playlist name and album art passed as props.\n  Parameters: props (object) - The props passed to the Playlist component.\n  Returns: None\n\n- Name: handleNameChange\n  Description: Updates the playlist name in the parent component when the input field value changes.\n  Parameters: event (object) - The event object triggered by the input field.\n  Returns: None\n\n- Name: render\n  Description: Renders the Playlist component with the playlist album art, name input field, Spotify logo, and save button. Also renders the TrackList component with the playlist tracks.\n  Parameters: None\n  Returns: JSX (React element) - The rendered Playlist component.", "src/components/SearchBar/SearchBar.css": "Description: This file defines the styling and functionality of the search bar component in the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n\nThe file does not contain any functions. It consists of CSS code that defines the styling of the search bar component. The CSS code includes properties for positioning, display, alignment, padding, margin, border, color, font size, and transitions. It also includes media queries for responsive design on screens with a maximum width of 600px.", "src/components/SearchBar/SearchBar.js": "Description: This file contains the code for the SearchBar component, which is responsible for rendering a search input field and a search button.\n\nDependencies: \n- React: The file imports the React library, which is used to create and manage React components.\n- './SearchBar.css': The file imports a CSS file that contains styling rules for the SearchBar component.\n- { faSearch } from '@fortawesome/free-solid-svg-icons': The file imports the faSearch icon from the '@fortawesome/free-solid-svg-icons' module, which is used to display a search icon in the search button.\n- { FontAwesomeIcon } from '@fortawesome/react-fontawesome': The file imports the FontAwesomeIcon component from the '@fortawesome/react-fontawesome' module, which is used to render the search icon in the search button.\n\nFunctions:\n- Name: constructor\n  Description: Initializes the state of the SearchBar component.\n  Parameters: props (object) - The props passed to the SearchBar component.\n  Returns: None\n\n- Name: handleTermChange\n  Description: Updates the state with the value of the search input field.\n  Parameters: event (object) - The event object triggered by the input field's onChange event.\n  Returns: None\n\n- Name: search\n  Description: Saves the search term in the browser's local storage and calls the onSearch function passed as a prop with the search term as an argument.\n  Parameters: None\n  Returns: None\n\n- Name: handleKeyDown\n  Description: Calls the search function when the Enter key is pressed.\n  Parameters: event (object) - The event object triggered by the input field's onKeyDown event.\n  Returns: None\n\n- Name: render\n  Description: Renders the SearchBar component.\n  Parameters: None\n  Returns: JSX - The JSX representation of the SearchBar component.", "src/components/SearchResults/SearchResults.css": "Description: This file defines the CSS styles for the search results section of the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None", "src/components/SearchResults/SearchResults.js": "Description: This file represents the search results component of the application, displaying a list of tracks and providing functionality to add tracks to a playlist.\nDependencies: React, './SearchResults.css', '../TrackList/TrackList.js'\nFunctions:\n- Name: addTopFive\n  Description: Adds the top five tracks from the search results to the playlist.\n  Parameters: None\n  Returns: None\n\n- Name: addTopTen\n  Description: Adds the top ten tracks from the search results to the playlist.\n  Parameters: None\n  Returns: None\n\n- Name: addAll\n  Description: Adds all tracks from the search results to the playlist.\n  Parameters: None\n  Returns: None\n\n- Name: render\n  Description: Renders the search results component, displaying the track list.\n  Parameters: None\n  Returns: JSX element representing the search results component.", "src/components/Track/Track.css": "Description: This file contains the CSS styles for the Track component in the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n\nThe file does not contain any functions. It only contains CSS styles for the Track component.", "src/components/Track/Track.js": "Description: This file defines the Track component, which is responsible for rendering a track and its associated information in the application.\n\nDependencies: \n- React: The main library for building user interfaces in the application.\n- FontAwesomeIcon: A library for using Font Awesome icons in the application.\n- faPlay, faPause: Specific icons from Font Awesome's free solid icon set.\n- \"./Track.css\": A CSS file that contains styling for the Track component.\n\nFunctions:\n- Name: addTrack\n  Description: Adds the current track to the user's playlist and toggles the play/pause state if the current track is the same as the added track.\n  Parameters: event (object) - The event object triggered by the addTrack action.\n  Returns: None\n\n- Name: removeTrack\n  Description: Removes the current track from the user's playlist and toggles the play/pause state if the current track is the same as the removed track.\n  Parameters: event (object) - The event object triggered by the removeTrack action.\n  Returns: None\n\n- Name: handleClick\n  Description: Toggles the play/pause state of the current track.\n  Parameters: None\n  Returns: None\n\n- Name: renderAction\n  Description: Renders the appropriate action button based on whether the track is in the user's playlist or not.\n  Parameters: None\n  Returns: JSX element - The rendered action button.\n\n- Name: render\n  Description: Renders the Track component with the track's image, name, artist, album, and action button.\n  Parameters: None\n  Returns: JSX element - The rendered Track component.\n\nNote: The Track component is exported as the default export of the file.", "src/components/TrackList/TrackList.css": "Description: This file manages the styling of the track list component in the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n\nDescription: This file does not contain any functions.\n\nParameters: None\n\nReturns: None", "src/components/TrackList/TrackList.js": "Description: This file represents the TrackList component in the application, responsible for rendering a list of tracks.\nDependencies: React, './TrackList.css', '../Track/Track.js'\nFunctions:\n- Name: render\n  Description: Renders the TrackList component and maps over the tracks array to render individual Track components.\n  Parameters: None\n  Returns: JSX - The rendered TrackList component.", "src/index.css": "Description: This file contains the CSS code for the body element of the application, setting the margin, padding, and font-family properties.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None", "src/index.js": "Description: This file is responsible for rendering the main application component and registering a service worker for offline functionality.\n\nDependencies: React, ReactDOM, App component, registerServiceWorker module, index.css\n\nFunctions:\n- Name: ReactDOM.render\n  Description: Renders the App component to the root element of the HTML document.\n  Parameters: <App /> (React component) - The main application component, document.getElementById('root') (DOM element) - The root element of the HTML document.\n  Returns: None\n\n- Name: registerServiceWorker\n  Description: Registers a service worker for offline functionality.\n  Parameters: None\n  Returns: None", "src/registerServiceWorker.js": "Description: This file registers a service worker in production to serve assets from local cache, allowing the app to load faster on subsequent visits and providing offline capabilities.\n\nDependencies: None\n\nFunctions:\n- Name: register\n  Description: Registers the service worker if the environment is set to production and the browser supports service workers.\n  Parameters: None\n  Returns: None\n\n- Name: unregister\n  Description: Unregisters the service worker if the browser supports service workers.\n  Parameters: None\n  Returns: None", "src/util/OpenAI.test.js": "Description: This file contains a test suite for the \"interpretPrompt\" function in the \"OpenAiAPIRequest.js\" file, which is responsible for making API calls to the OpenAI chat completions endpoint and determining appropriate strategies based on the API response.\n\nDependencies: The file depends on the \"nock\" library for mocking HTTP requests and the \"DetermineAppropriateStrategies\" function from the \"OpenAiAPIRequest.js\" file.\n\nFunctions:\n- Name: interpretPrompt\n  Description: This function is responsible for making an API call to the OpenAI chat completions endpoint with a given prompt and returning an array of strategies based on the API response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: An array of strategies (array) - The strategies determined based on the API response.", "src/util/OpenAiAPIRequest.js": "Description: This file contains functions for generating song recommendations, playlist names, and images based on user prompts using the OpenAI API.\n\nDependencies: process.env, fetch\n\nFunctions:\n- Name: generateTotalSongRecommendations\n  Description: Creates song recommendations based on a prompt by determining appropriate strategies, generating recommendations for each strategy, and combining and randomizing the recommendations.\n  Parameters: prompt (string) - The user's prompt for song recommendations.\n  Returns: recommendations (array) - An array of song recommendations.\n\n- Name: DetermineAppropriateStrategies\n  Description: Interprets the prompt to determine which batch strategies make sense for generating song recommendations.\n  Parameters: prompt (string) - The user's prompt for song recommendations.\n  Returns: strategies (array) - An array of numbers representing the suitable strategies for generating recommendations.\n\n- Name: generateSongRecommendations\n  Description: Generates song recommendations based on a prompt using the OpenAI API.\n  Parameters: prompt (string) - The user's prompt for song recommendations.\n  Returns: recommendations (array) - An array of song recommendations.\n\n- Name: generatePlaylistName\n  Description: Generates a playlist name based on a prompt using the OpenAI API.\n  Parameters: prompt (string) - The user's prompt for the playlist name.\n  Returns: playlistName (string) - The generated playlist name.\n\n- Name: generateImage\n  Description: Generates an image based on a prompt using the OpenAI API.\n  Parameters: prompt (string) - The user's prompt for the image.\n  Returns: imageUrl (string) - The URL of the generated image.", "src/util/SoundCloud.js": "Description: This file is responsible for searching and retrieving playlists from the SoundCloud API based on a given search phrase, and writing the playlist and track data to a CSV file.\n\nDependencies: The file depends on the 'node-fetch' module for making HTTP requests to the SoundCloud API, and the 'csv-writer' module for writing data to a CSV file.\n\nFunctions:\n- Name: searchPlaylists\n  Description: Searches for playlists on SoundCloud based on a given search phrase, retrieves the playlist and track data, and writes it to a CSV file.\n  Parameters: searchPhrase (string) - The search phrase to be used for searching playlists on SoundCloud.\n  Returns: None", "src/util/Spotify.js": "Description: This file contains the implementation of the Spotify class, which handles authentication, user information retrieval, track searching, and playlist creation for the Spotify API integration in the application.\n\nDependencies: None\n\nFunctions:\n- Name: getAccessToken\n  Description: Retrieves the access token for the Spotify API. If the access token is already available, it returns the stored token. Otherwise, it redirects the user to the Spotify authorization page to obtain a new access token.\n  Parameters: None\n  Returns: accessToken (string) - The access token for the Spotify API.\n\n- Name: getUserInfo\n  Description: Retrieves the user's information from the Spotify API, including their username and avatar.\n  Parameters: None\n  Returns: userInfo (object) - An object containing the user's username and avatar.\n\n- Name: search\n  Description: Searches for tracks on Spotify based on the provided search term and genre.\n  Parameters: term (string) - The search term, genre (string) - The genre to filter the search results.\n  Returns: tracks (array) - An array of objects representing the searched tracks, including their ID, name, artist, album, URI, preview URL, image URL, genre, Spotify logo image URL, and Spotify track link.\n\n- Name: openAiSearch\n  Description: Searches for a track on Spotify based on the provided track and artist names.\n  Parameters: term (string) - The track and artist names separated by a hyphen.\n  Returns: tracks (array) - An array of objects representing the searched tracks, including their ID, name, artist, album, URI, preview URL, image URL, Spotify logo image URL, and Spotify track link.\n\n- Name: makeRecommendation\n  Description: Retrieves track recommendations from the Spotify API based on the provided seed track IDs.\n  Parameters: songId1, songId2, songId3, songId4, songId5 (string) - The IDs of the seed tracks.\n  Returns: tracks (array) - An array of objects representing the recommended tracks, including their ID, name, artist, album, URI, preview URL, Spotify logo image URL, and Spotify track link.\n\n- Name: clearAccessToken\n  Description: Clears the stored access token.\n  Parameters: None\n  Returns: None\n\n- Name: isLoggedIn\n  Description: Checks if the user is currently logged in by verifying the presence of an access token.\n  Parameters: None\n  Returns: isLoggedIn (boolean) - True if the user is logged in, False otherwise.", "src/util/interpretPrompt.js": "Description: This file is responsible for making requests to the OpenAI API and interpreting the response.\nDependencies: OpenAiAPIRequest.js\nFunctions:\n- Name: interpretPrompt2\n  Description: Sends a prompt to the OpenAI API and interprets the response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: response (string) - The interpreted response from the API."}