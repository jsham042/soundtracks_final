{
    "jest.setup.js": "Description: This file is responsible for mocking the fetch API in Jest tests.\n\nDependencies: None\n\nFunctions:\n- Name: require\n  Description: This function is used to import the 'jest-fetch-mock' module.\n  Parameters: None\n  Returns: None",
    "public/index.html": "Description: This file is the main HTML template for the SoundTracks web application.\n\nDependencies: reset.css, Poppins and Work Sans fonts, manifest.json, djboticon.png\n\nFunctions: N/A",
    "public/reset.css": "Description: This file contains a CSS reset code that resets the default styles of HTML elements to ensure consistent rendering across different browsers.\n\nDependencies: None\n\nFunctions:\n- None",
    "src/components/App/App.css": "Page Title: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the user interface of the application. It defines the visual appearance of various elements on the web page.\n\n  Dependencies: \n  - None\n\nContent Overview:\n\n  This file includes CSS rules for styling different components of the application, such as headers, buttons, user information display, and navigation elements. It also includes media queries for responsive design to ensure the application looks good on different screen sizes. The file uses a combination of colors, fonts, padding, margins, and positioning to create a visually appealing and user-friendly interface.",
    "src/components/App/App.js": "Page Title: App.js\n\nModule Overview:\n\n  Purpose: The App.js module serves as the main component of the application, managing user authentication, playlist creation, and Spotify integration.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - Spotify: A utility module for interacting with the Spotify API.\n  - OpenAiAPIRequest: A utility module for making requests to the OpenAI API.\n  - FontAwesome: A library for adding icons to the application.\n  - react-router-dom: A library for handling routing in React applications.\n\nClasses:\n\n  App:\n  - Purpose: Represents the main application component, handling user authentication, playlist management, and rendering different views based on user actions.\n  - Attributes:\n    - loggedIn (bool): Indicates if the user is logged in.\n    - searchResults (array): Array to store search results.\n    - playlistName (str): The name of the current playlist.\n    - playlistTracks (array): Array to store tracks in the playlist.\n    - playlists (array): Array to store user playlists.\n    - isFetching (bool): Indicates if data is being fetched.\n    - searchState (bool): Indicates if the app is in search state.\n    - albumArt (str): URL of the default album art.\n    - currentTrack (obj): Object representing the current track.\n    - spotifyUsername (str): The username of the Spotify user.\n    - spotifyAvatar (str): URL of the Spotify user's avatar.\n    - loadingAlbumArt (bool): Indicates if album art is being loaded.\n    - loadingPlaylistName (bool): Indicates if playlist name is being loaded.\n    - showSearchResults (bool): Indicates if search results should be displayed.\n  - Methods:\n    - openAiSearch(): Initiates a search using the OpenAI API.\n    - addTrack(track): Adds a track to the playlist.\n    - removeTrack(track): Removes a track from the playlist.\n    - updatePlaylistName(name): Updates the name of the playlist.\n    - savePlaylist(): Saves the current playlist.\n    - generatePlaylistName(): Generates a name for the playlist using the OpenAI API.\n    - setToSearchState(): Sets the app to search state.\n    - setToPlaylistState(): Sets the app to playlist state.\n    - clearPlaylist(): Clears the current playlist.\n    - toggleTrack(track): Toggles the selection of a track.\n    - handleLogin(): Handles user login and retrieves user information from Spotify.\n    - handleLogout(): Logs the user out and resets app state.\n    - generateAlbumArt(): Generates album art for the current track.\n    - interpretPrompt(): Interprets user prompts using the OpenAI API.\n    - removeDuplicateTracks(): Removes duplicate tracks from the playlist.\n    - toggleView(): Toggles between search and playlist views.\n    - regenerateAlbumArt(): Regenerates album art for the current track.\n    - updatePlaylists(newPlaylist): Updates the playlists array with a new playlist.\n\nFunctions:\n\n  None\n\nOverall, the App.js file serves as the central component of the application, managing user authentication, playlist creation, and interaction with external APIs like Spotify and OpenAI. It contains methods for handling user actions, updating state, and rendering different views based on the app's current state.",
    "src/components/LoginPage/LoginPage.css": "Description: This file defines the styling and layout for the login page of the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/components/LoginPage/LoginPage.js": "Description: This file represents the login page component of the application, responsible for rendering the login form and handling user authentication.\nDependencies: React, './LoginPage.css'\nFunctions:\n- Name: LoginPage\n  Description: A functional component that renders the login page UI.\n  Parameters: onLogin (function) - A callback function to be executed when the login button is clicked.\n  Returns: JSX - The rendered login page UI.\n\nNo additional functions or classes are contained in this file.",
    "src/components/Playlist/Playlist.css": "File Summary: Playlist.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the playlist component in the application. It defines the layout, colors, and animations for the playlist display.\n  \n  Dependencies: \n  - None\n\nClasses:\n\n  .Playlist:\n  - Purpose: Represents the main container for the playlist component.\n  - Attributes:\n    - display: flex;\n    - flex-direction: column;\n    - overflow-y: scroll;\n    - height: 100%;\n    - padding: 0.88rem 0.88rem;\n    - background-color: #1E1E20;\n\n  .Playlist-header:\n  - Purpose: Represents the header section of the playlist.\n  - Attributes:\n    - display: flex;\n    - align-items: center;\n    - margin-bottom: 1.5rem;\n\n  .regenerate-button:\n  - Purpose: Represents the button to regenerate the playlist.\n  - Attributes:\n    - background-color: rgba(29, 185, 84, 0.8);\n    - color: white;\n    - border: none;\n    - padding: 5px 10px;\n    - border-radius: 20px;\n    - cursor: pointer;\n    - font-size: 0.8rem;\n    - margin-top: 10px;\n    - transition: background-color 0.3s ease;\n\n  (and so on for other classes defined in the file)\n\nFunctions:\n\n  None\n\nThis file primarily focuses on defining the styles for the playlist component in the application. It includes rules for the layout, colors, animations, and responsiveness of the playlist display. The classes defined in this file help in structuring and styling the playlist component for a visually appealing user experience.",
    "src/components/Playlist/Playlist.js": "Module Overview:\n\nPurpose: The Playlist module is responsible for rendering a user's playlist with the ability to edit the playlist name, regenerate album artwork, save the playlist to Spotify, and manage the tracks within the playlist.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- FontAwesomeIcon: A library for displaying icons in React applications.\n- TrackList: A component for displaying and managing tracks within a playlist.\n\nClasses:\n\nPlaylist:\n- Purpose: Represents a user's playlist with functionalities for editing the playlist name, regenerating album artwork, saving the playlist, and managing tracks.\n- Attributes:\n  - loadingPlaylistName (bool): Indicates if the playlist name is being loaded.\n  - loadingAlbumArt (bool): Indicates if the album artwork is being loaded.\n  - showNameEditor (bool): Indicates if the playlist name editor is visible.\n- Methods:\n  - handleNameChange(event: Event) -> void: Updates the playlist name based on user input.\n  - handleShowNameEditor() -> void: Toggles the visibility of the playlist name editor.\n  - render() -> JSX.Element: Renders the playlist component with interactive elements for editing and managing the playlist.\n\nFunctions:\nN/A\n\nOverall, the Playlist module provides a user-friendly interface for managing playlists, including editing the playlist name, regenerating album artwork, and saving the playlist to Spotify. It also allows users to interact with and manage the tracks within the playlist.",
    "src/components/SearchBar/SearchBar.css": "File Summary: SearchBar.css\n\nModule Overview:\n\n  Purpose: The SearchBar.css file contains styling rules for the search bar component in the application. It defines the layout, appearance, and behavior of the search bar.\n\n  Dependencies: \n  - None\n\nClasses:\n\n  SearchBar:\n  - Purpose: Represents the search bar component.\n  - Attributes:\n    - None\n  - Methods:\n    - None\n\nFunctions:\n  - None\n\nThe SearchBar class defines the styling for the search bar component, including the input field and search button. It includes rules for responsiveness on smaller screens, such as adjusting alignment and padding. The file also specifies hover effects for the search button.\n\nOverall, the SearchBar.css file is crucial for maintaining a consistent and user-friendly design for the search functionality within the application.",
    "src/components/SearchBar/SearchBar.js": "Module Overview:\n\nPurpose: The SearchBar module provides a search bar component for users to input search terms and trigger a search action within the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @fortawesome/free-solid-svg-icons: A library for accessing free solid icons.\n- @fortawesome/react-fontawesome: A library for using Font Awesome icons in React components.\n\nClasses:\n\nSearchBar:\n- Purpose: Represents a search bar component that allows users to input search terms and trigger a search action.\n- Attributes:\n  - term (string): The current search term input by the user.\n- Methods:\n  - handleTermChange(event: Event) -> void: Updates the search term based on user input.\n  - search() -> void: Saves the search term to local storage and triggers the search action.\n  - handleKeyDown(event: KeyboardEvent) -> void: Handles the Enter key press event to trigger the search action.\n\nFunctions:\n- N/A\n\nOverall, the SearchBar module provides a reusable component for implementing search functionality in the application, allowing users to input search terms and trigger search actions easily.",
    "src/components/SearchResults/SearchResults.css": "File: SearchResults.css\n\nModule Overview:\n\n  Purpose: This file defines the styling for the search results component in the application. It specifies the layout, colors, and animations for the search results display.\n  \n  Dependencies: \n  - None\n\nClasses:\n\n  .SearchResults:\n  - Purpose: Represents the container for displaying search results.\n  - Attributes:\n    - display: flex;\n    - flex-direction: column;\n    - overflow-y: scroll;\n    - height: 100%;\n    - padding: 0.88rem 0.88rem;\n    - background-color: #1E1E20;\n\n  .action-button:\n  - Purpose: Represents a clickable button for performing actions on search results.\n  - Attributes:\n    - background-color: #282828;\n    - color: #fff;\n    - border: 1px solid #1db954;\n    - border-radius: 4px;\n    - padding: 4px 16px;\n    - font-size: 14px;\n    - font-weight: 500;\n    - text-transform: uppercase;\n    - cursor: pointer;\n    - transition: all 0.2s ease;\n    - margin-right: 10px;\n    - margin-bottom: 10px;\n\n  .action-buttons:\n  - Purpose: Represents a container for arranging action buttons in a row.\n  - Attributes:\n    - display: flex;\n    - flex-wrap: wrap;\n    - justify-content: space-between;\n\n  .action-buttons-mobile:\n  - Purpose: Represents a container for action buttons on mobile devices.\n  - Attributes:\n    - display: none;\n\nFunctions:\n\n  N/A\n\nOverall, the SearchResults.css file defines the styling for the search results component, including the layout of the results container and the appearance of action buttons. The file also includes responsive design rules for mobile devices.",
    "src/components/SearchResults/SearchResults.js": "Module Overview:\n\nPurpose: The SearchResults module is responsible for displaying search results for tracks and providing actions to add tracks to a playlist, fetch more recommendations, and clear search results.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- \"./SearchResults.css\": A CSS file for styling the SearchResults component.\n- TrackList: A component for displaying a list of tracks.\n- Spotify: A utility module for making API calls to fetch recommendations.\n\nClasses:\n\nSearchResults:\n- Purpose: Represents the component for displaying search results and handling user actions.\n- Attributes:\n  - props: Contains search results, functions for adding tracks, toggling tracks, and updating search results.\n- Methods:\n  - addTopFive(): Adds the top five tracks to the playlist.\n  - addTopTen(): Adds the top ten tracks to the playlist.\n  - addAll(): Adds all tracks to the playlist.\n  - fetchMoreRecommendations(): Fetches more recommendations based on the top 5 tracks.\n  - clearSearchResults(): Clears the search results.\n  - render(): Renders the SearchResults component with action buttons and TrackList.\n\nFunctions:\n- No standalone functions are defined in this file.\n\nOverall, the SearchResults module is crucial for displaying search results, managing user actions, and interacting with the Spotify API to fetch recommendations. It plays a significant role in enhancing the user experience of the application by providing relevant track information and playlist management functionalities.",
    "src/components/ToastNotification/ToastNotification.css": "File Summary: ToastNotification.css\n\nModule Overview:\n\n  Purpose: This file provides the base styling for the ToastNotification component, which is used to display non-intrusive notifications to users.\n  Dependencies: This file does not have any external dependencies.\n\nClasses:\n\n  ToastNotification:\n  - Purpose: Represents the styling for the ToastNotification component.\n  - Attributes:\n    - position: fixed; (str): Sets the position of the notification.\n    - bottom: 20px; (int): Sets the distance from the bottom of the viewport.\n    - right: 20px; (int): Sets the distance from the right of the viewport.\n    - width: auto; (str): Sets the width of the notification.\n    - padding: 16px 24px; (str): Sets the padding inside the notification.\n    - background-color: #323232; (str): Sets the background color of the notification.\n    - color: #ffffff; (str): Sets the text color of the notification.\n    - font-size: 16px; (int): Sets the font size of the text.\n    - border-radius: 8px; (int): Sets the border radius of the notification.\n    - box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); (str): Sets the box shadow of the notification.\n    - z-index: 1000; (int): Sets the stacking order of the notification.\n    - display: flex; (str): Sets the display property to flex.\n    - align-items: center; (str): Aligns items along the cross-axis.\n    - justify-content: space-between; (str): Aligns items along the main-axis.\n  - Methods: This class does not have any methods.\n\nFunctions: This file does not contain any functions.\n\nOverall, this file defines the base styling for the ToastNotification component, including its position, appearance, and animations. Developers can use this file to customize the visual aspects of the ToastNotification component in the application.",
    "src/components/ToastNotification/ToastNotification.js": "Module Overview:\n\nPurpose: The ToastNotification module provides a component for displaying toast notifications to users in the application.\n\nDependencies: \n- React: A JavaScript library for building user interfaces.\n- useState: A React hook for managing state in functional components.\n- useEffect: A React hook for handling side effects in functional components.\n\nFunctions:\n\nToastNotification:\n- Purpose: Represents a toast notification that displays a message for a specified duration.\n- Arguments:\n  - message (string): The message to be displayed in the toast notification.\n  - duration (number): The duration in milliseconds for which the toast notification should be visible. Default is 3000 milliseconds.\n- Returns:\n  - JSX element: The toast notification component.\n- Exceptions:\n  - None\n\nThe ToastNotification function uses the useState hook to manage the visibility of the toast notification based on the message prop. It also utilizes the useEffect hook to automatically hide the notification after the specified duration. If the message is empty, the notification will not be displayed.",
    "src/components/Track/Track.css": "File Summary: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the Track component in the application. It defines the visual appearance and behavior of the Track component, including its actions and information display.\n\n  Dependencies: \n  - None\n\nClasses:\n\n  Track:\n  - Purpose: Represents a single track element in the application.\n  - Attributes:\n    - None\n  - Methods:\n    - None\n\n  Track-action:\n  - Purpose: Represents the action buttons associated with a track.\n  - Attributes:\n    - display: inline-flex\n    - align-items: center\n    - justify-content: center\n    - border-radius: 50%\n    - margin: 0 0.7rem 0 0.25rem\n    - border: 1px solid #c5c6c7\n    - background-color: #c5c6c7\n    - color: rgba(0, 0, 0, 1)\n    - font-size: 1.5rem\n    - transition: all 0.25s ease-in-out\n    - width: 1.5rem\n    - height: 1.5rem\n    - min-width: 1.5rem\n    - min-height: 1.5rem\n  - Methods:\n    - None\n\n  Track-information:\n  - Purpose: Represents the information display section of a track.\n  - Attributes:\n    - padding: 0.6rem\n    - flex-grow: 1\n    - display: flex\n    - flex-direction: column\n    - justify-content: center\n    - white-space: nowrap\n    - overflow: hidden\n    - text-overflow: ellipsis\n    - max-width: calc(100% - 5rem)\n    - margin-left: 10px\n    - word-wrap: break-word\n  - Methods:\n    - None\n\nFunctions:\n\n  None\n\nOverall, this file defines the styling rules for the Track component, including its action buttons and information display. It ensures a consistent and visually appealing presentation of track elements within the application.",
    "src/components/Track/Track.js": "Module Overview:\n\nPurpose: The Track module is responsible for rendering a track component within the application. It allows users to interact with the track by adding or removing it, playing the track, and displaying track information.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- FontAwesomeIcon: A library for displaying icons in React applications.\n- ToastNotification: A custom component for displaying toast notifications.\n- \"./Track.css\": A CSS file for styling the Track component.\n\nClasses:\n\nTrack:\n- Purpose: Represents a track within the application.\n- Attributes:\n  - props: The properties passed to the component.\n  - state:\n    - toastMessage (str): The message to display in the toast notification.\n- Methods:\n  - addTrack(event) -> None: Adds the track to the user's playlist.\n  - removeTrack(event) -> None: Removes the track from the user's playlist.\n  - handleClick() -> None: Handles the click event on the track component, plays the track, and displays toast notifications.\n  - renderAction() -> JSX.Element: Renders the action button for adding or removing the track.\n  - render() -> JSX.Element: Renders the track component with play button, track information, and action button.\n\nFunctions:\nN/A\n\nOverall, the Track module is essential for displaying and interacting with individual tracks in the application. It handles user actions such as adding or removing tracks, playing tracks, and displaying notifications.",
    "src/components/TrackList/TrackList.css": "File: TrackList.css\n\nModule Overview:\n\n  Purpose: This file contains styling rules for the TrackList component, which is used to display a list of tracks in the application.\n  Dependencies: This file does not have any external dependencies.\n\nClasses:\n\n  .TrackList:\n  - Purpose: Represents the container for the list of tracks.\n  - Attributes:\n    - width (100%): Sets the width of the container to 100% of its parent element.\n    - overflow-x (hidden): Hides horizontal overflow content.\n    - overflow-y (scroll): Enables vertical scrolling for overflow content.\n  - Methods: This class does not have any methods defined.\n\nFunctions: This file does not contain any functions.\n\nOverall, the TrackList.css file defines the styling for the TrackList component, ensuring that the list of tracks is displayed correctly with the specified width and scrolling behavior.",
    "src/components/TrackList/TrackList.js": "Module Overview:\n\n  Purpose: The TrackList module is responsible for rendering a list of tracks in the application. It receives a list of tracks as a prop and maps over them to render individual Track components.\n\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - Track: The Track component used to display individual tracks.\n  - TrackList.css: The CSS file for styling the TrackList component.\n\nClasses:\n\n  TrackList:\n  - Purpose: Represents a list of tracks to be displayed in the application.\n  - Attributes:\n    - tracks (array): An array of track objects to be rendered.\n    - onAdd (function): A function to handle adding a track to a playlist.\n    - isRemoval (boolean): Indicates if the track is to be removed from the playlist.\n    - onRemove (function): A function to handle removing a track from a playlist.\n    - onToggle (function): A function to handle toggling a track in the playlist.\n    - currentTrack (object): The currently selected track.\n  - Methods:\n    - render() -> JSX.Element: Renders the TrackList component.\n          - Returns:\n            - JSX.Element: The rendered TrackList component.\n\nFunctions:\n  N/A",
    "src/index.css": "Description: This file contains the CSS code for the body element of the application, setting the margin, padding, and font-family properties.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/index.js": "Description: This file is responsible for rendering the main application component and registering a service worker for offline functionality.\n\nDependencies: React, ReactDOM, App component, registerServiceWorker module, index.css\n\nFunctions:\n- Name: ReactDOM.render\n  Description: Renders the App component to the root element of the HTML document.\n  Parameters: <App /> (React component) - The main application component, document.getElementById('root') (DOM element) - The root element of the HTML document.\n  Returns: None\n\n- Name: registerServiceWorker\n  Description: Registers a service worker for offline functionality.\n  Parameters: None\n  Returns: None",
    "src/registerServiceWorker.js": "Description: This file registers a service worker in production to serve assets from local cache, allowing the app to load faster on subsequent visits and providing offline capabilities.\n\nDependencies: None\n\nFunctions:\n- Name: register\n  Description: Registers the service worker if the environment is set to production and the browser supports service workers.\n  Parameters: None\n  Returns: None\n\n- Name: unregister\n  Description: Unregisters the service worker if the browser supports service workers.\n  Parameters: None\n  Returns: None",
    "src/util/OpenAI.test.js": "Description: This file contains a test suite for the \"interpretPrompt\" function in the \"OpenAiAPIRequest.js\" file, which is responsible for making API calls to the OpenAI chat completions endpoint and determining appropriate strategies based on the API response.\n\nDependencies: The file depends on the \"nock\" library for mocking HTTP requests and the \"DetermineAppropriateStrategies\" function from the \"OpenAiAPIRequest.js\" file.\n\nFunctions:\n- Name: interpretPrompt\n  Description: This function is responsible for making an API call to the OpenAI chat completions endpoint with a given prompt and returning an array of strategies based on the API response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: An array of strategies (array) - The strategies determined based on the API response.",
    "src/util/OpenAiAPIRequest.js": "Module Overview:\n\nPurpose: This module provides functionality for generating AI-based song recommendations and managing playlist creation based on user input. It also includes functions for generating playlist names and images using OpenAI's APIs.\n\nDependencies:\n- fetch: A built-in JavaScript function for making HTTP requests.\n- process.env.REACT_APP_MY_OPENAI_API_KEY: Environment variable containing the OpenAI API key.\n- API_URL_COMPLETIONS, API_URL_CHAT_COMPLETIONS, API_URL_IMAGE: URLs for different OpenAI API endpoints.\n\nFunctions:\n\ngenerateAISongRecommendations(userSearchInput: string) -> Array:\n- Purpose: Generates song recommendations based on a user's input by utilizing AI strategies and calling the OpenAI API.\n- Arguments:\n  - userSearchInput (string): The user's input for generating recommendations.\n- Returns:\n  - Array: An array of recommended songs and artists in JSON format.\n- Exceptions:\n  - None specified.\n\nDetermineAppropriateStrategies(userSearchInput: string) -> Array:\n- Purpose: Interprets the user's prompt to determine suitable strategies for generating music recommendations.\n- Arguments:\n  - userSearchInput (string): The user's input for determining strategies.\n- Returns:\n  - Array: An array of suitable strategies based on the user's prompt.\n- Exceptions:\n  - None specified.\n\ngenerateSongRecommendations(prompt: string) -> string:\n- Purpose: Generates song recommendations based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating recommendations.\n- Returns:\n  - string: The response containing song recommendations in JSON format.\n- Exceptions:\n  - None specified.\n\ngeneratePlaylistName(prompt: string) -> string:\n- Purpose: Generates a playlist name based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating a playlist name.\n- Returns:\n  - string: The generated playlist name.\n- Exceptions:\n  - None specified.\n\ngenerateImage(prompt: string) -> string:\n- Purpose: Generates an image based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating an image.\n- Returns:\n  - string: The URL of the generated image.\n- Exceptions:\n  - None specified.\n\nOverall, this file serves as a crucial component for leveraging AI capabilities to enhance user experience in music recommendation and playlist creation within the application.",
    "src/util/SoundCloud.js": "Description: This file is responsible for searching and retrieving playlists from the SoundCloud API based on a given search phrase, and writing the playlist and track data to a CSV file.\n\nDependencies: The file depends on the 'node-fetch' module for making HTTP requests to the SoundCloud API, and the 'csv-writer' module for writing data to a CSV file.\n\nFunctions:\n- Name: searchPlaylists\n  Description: Searches for playlists on SoundCloud based on a given search phrase, retrieves the playlist and track data, and writes it to a CSV file.\n  Parameters: searchPhrase (string) - The search phrase to be used for searching playlists on SoundCloud.\n  Returns: None",
    "src/util/Spotify.js": "File Summary: Spotify.js\n\nModule Overview:\n\nPurpose: This module provides functionality for interacting with the Spotify API to access user information, search for tracks, make recommendations, and create playlists within the application.\n\nDependencies:\n- process.env: Environment variables for configuration settings.\n- window.location: Browser window location for handling access tokens.\n- fetch: Web API for making HTTP requests.\n\nFunctions and Methods:\n\ngetAccessToken():\n- Purpose: Retrieves the access token for making authenticated requests to the Spotify API.\n- Returns: The access token string.\n- Exceptions: Redirects to Spotify authorization if access token is not available.\n\ngetUserInfo():\n- Purpose: Fetches the user's information from the Spotify API.\n- Returns: An object with the user's display name and avatar.\n- Exceptions: Returns default values if user information is not available.\n\ngetArtistGenres(artistId, accessToken):\n- Purpose: Retrieves the genres of a specific artist from the Spotify API.\n- Arguments: artistId (string), accessToken (string).\n- Returns: The primary genre of the artist.\n- Exceptions: Returns \"Unknown Genre\" if genre information is not available.\n\nopenAiSearch(term):\n- Purpose: Searches for a track on Spotify based on the provided term.\n- Arguments: term (object with song and artist properties).\n- Returns: An array of track objects with details like name, artist, genre, and preview URL.\n- Exceptions: Returns an empty array if no tracks are found.\n\nmakeRecommendation(trackIds):\n- Purpose: Generates track recommendations based on seed tracks.\n- Arguments: trackIds (array of track IDs).\n- Returns: An array of recommended track objects.\n- Exceptions: Returns an empty array if no recommendations are available.\n\nsavePlaylist(name, trackUris):\n- Purpose: Saves a playlist with the given name and track URIs.\n- Arguments: name (string), trackUris (array of track URIs).\n- Returns: None.\n- Exceptions: Handles errors related to user permissions and database issues.\n\nlogout():\n- Purpose: Logs out the user by clearing the access token.\n\nisLoggedIn():\n- Purpose: Checks if the user is currently logged in.\n- Returns: True if the user is logged in, False otherwise.",
    "src/util/Spotify.test.js": "File Summary: Spotify.js\n\nModule Overview:\n\n  Purpose: The Spotify module provides functionality for making recommendations based on seed tracks from the Spotify API.\n  Dependencies: \n  - jest: Testing framework for mocking fetch requests.\n  - global.fetch: Browser API for making HTTP requests.\n\nFunctions:\n\n  Spotify.makeRecommendation(seedTrack1: string, seedTrack2: string, seedTrack3?: string, seedTrack4?: string, seedTrack5?: string) -> Array:\n  - Purpose: Fetches recommendations from the Spotify API based on seed tracks and returns formatted track data.\n  - Arguments:\n    - seedTrack1 (string): The ID of the first seed track.\n    - seedTrack2 (string): The ID of the second seed track.\n    - seedTrack3 (string, optional): The ID of the third seed track.\n    - seedTrack4 (string, optional): The ID of the fourth seed track.\n    - seedTrack5 (string, optional): The ID of the fifth seed track.\n  - Returns:\n    - Array: An array of formatted track data objects.\n  - Exceptions:\n    - None\n\n  beforeEach() -> None:\n  - Purpose: Sets up mock functions for global.fetch and Spotify.getAccessToken before each test.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\n  afterEach() -> None:\n  - Purpose: Resets all mock functions after each test.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\nExample Page Template:\n\nPage Title: Spotify.js\n\nModule Overview:\n\n  Purpose: The Spotify module provides functionality for making recommendations based on seed tracks from the Spotify API.\n  Dependencies: \n  - jest: Testing framework for mocking fetch requests.\n  - global.fetch: Browser API for making HTTP requests.\n\nFunctions:\n\n  Spotify.makeRecommendation(seedTrack1: string, seedTrack2: string, seedTrack3?: string, seedTrack4?: string, seedTrack5?: string) -> Array:\n  - Purpose: Fetches recommendations from the Spotify API based on seed tracks and returns formatted track data.\n  - Arguments:\n    - seedTrack1 (string): The ID of the first seed track.\n    - seedTrack2 (string): The ID of the second seed track.\n    - seedTrack3 (string, optional): The ID of the third seed track.\n    - seedTrack4 (string, optional): The ID of the fourth seed track.\n    - seedTrack5 (string, optional): The ID of the fifth seed track.\n  - Returns:\n    - Array: An array of formatted track data objects.\n  - Exceptions:\n    - None\n\n  beforeEach() -> None:\n  - Purpose: Sets up mock functions for global.fetch and Spotify.getAccessToken before each test.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\n  afterEach() -> None:\n  - Purpose: Resets all mock functions after each test.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None",
    "src/util/interpretPrompt.js": "Description: This file is responsible for making requests to the OpenAI API and interpreting the response.\nDependencies: OpenAiAPIRequest.js\nFunctions:\n- Name: interpretPrompt2\n  Description: Sends a prompt to the OpenAI API and interprets the response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: response (string) - The interpreted response from the API."
}