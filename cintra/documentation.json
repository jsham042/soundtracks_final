{
    "jest.setup.js": "Description: This file is responsible for mocking the fetch API in Jest tests.\n\nDependencies: None\n\nFunctions:\n- Name: require\n  Description: This function is used to import the 'jest-fetch-mock' module.\n  Parameters: None\n  Returns: None",
    "public/index.html": "Description: This file is the main HTML template for the SoundTracks web application.\n\nDependencies: reset.css, Poppins and Work Sans fonts, manifest.json, djboticon.png\n\nFunctions: N/A",
    "public/reset.css": "Description: This file contains a CSS reset code that resets the default styles of HTML elements to ensure consistent rendering across different browsers.\n\nDependencies: None\n\nFunctions:\n- None",
    "src/components/App/App.css": "Page Title: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the application's HTML elements, defining the visual appearance of the user interface.\n\n  Dependencies: \n  - None\n\nContent Overview:\n\nThe styles.css file includes CSS rules for various HTML elements such as headings, containers, buttons, and user interface components. It defines properties like font size, color, padding, margins, background colors, and positioning for different elements to ensure a consistent and visually appealing design across the application. The file also includes rules for specific classes like .highlight, .Fetching-sign, .feedback, .Header, .user-info, .Logout-button, .SearchAndPlaylist, .SearchSection, .PlaylistSection, and their respective styles. Additionally, it sets up the layout for the application, including flexbox properties, alignment, and spacing.",
    "src/components/App/App.js": "Module Overview:\n\nPurpose: The App.js file is a crucial component of the application that serves as the main entry point for the user interface. It handles user authentication, search functionality, playlist management, and interaction with the Spotify API.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- FontAwesome: A library of icons for use in the application.\n- Spotify: A utility module for interacting with the Spotify API.\n- OpenAiAPIRequest: A utility module for making requests to the OpenAI API.\n- RecommendationEngineUpdate: A utility module for updating playlist recommendations.\n\nClasses:\n\nApp:\n- Purpose: Represents the main application component that manages user authentication, search functionality, playlist management, and UI rendering.\n- Attributes:\n  - loggedIn (bool): Indicates if the user is logged in.\n  - searchResults (array): Array of search results from the Spotify API.\n  - playlistName (str): Name of the current playlist.\n  - playlistTracks (array): Array of tracks in the playlist.\n  - isFetching (bool): Indicates if data is being fetched.\n  - searchState (bool): Indicates if the app is in search mode.\n  - albumArt (str): URL of the album art image.\n  - currentTrack (object): Currently playing track.\n  - spotifyUsername (str): Spotify username of the user.\n  - spotifyAvatar (str): URL of the user's avatar image.\n  - userBPM (int): User's BPM preference.\n  - userMood (str): User's mood preference.\n  - userGenre (str): User's genre preference.\n- Methods:\n  - handleLogin(): Handles user authentication using the Spotify utility.\n  - handleLogout(): Logs the user out and resets app state.\n  - interpretPrompt(prompt: str): Interprets a prompt using the OpenAI API.\n  - openAiSearch(userSearchInput: str): Performs a search using the OpenAI API and Spotify API.\n  - generatePlaylistName(prompt: str): Generates a playlist name using the recommendation engine.\n  - generateAlbumArt(playlistName: str): Generates album art for the playlist using the OpenAI API.\n  - removeDuplicateTracks(tracks: array): Removes duplicate tracks from a list.\n  - addTrack(track: object): Adds a track to the playlist.\n  - toggleTrack(track: object): Toggles playback of a track.\n  - componentDidMount(): Lifecycle method for initializing app state and checking user authentication.\n  - removeTrack(track: object): Removes a track from the playlist.\n  - updatePlaylistName(name: str): Updates the playlist name.\n  - savePlaylist(): Saves the current playlist to the user's Spotify account.\n  - setToSearchState(): Sets the app to search mode.\n  - setToPlaylistState(): Sets the app to playlist mode.\n\nFunctions:\nN/A\n\nOverall, the App.js file is a central component of the application responsible for managing user interactions, playlist creation, and integration with external APIs.",
    "src/components/LoginPage/LoginPage.css": "Description: This file defines the styling and layout for the login page of the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/components/LoginPage/LoginPage.js": "Description: This file represents the login page component of the application, responsible for rendering the login form and handling user authentication.\nDependencies: React, './LoginPage.css'\nFunctions:\n- Name: LoginPage\n  Description: A functional component that renders the login page UI.\n  Parameters: onLogin (function) - A callback function to be executed when the login button is clicked.\n  Returns: JSX - The rendered login page UI.\n\nNo additional functions or classes are contained in this file.",
    "src/components/Playlist/Playlist.css": "File Summary: Playlist.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the playlist component in the application. It defines the layout, colors, and responsiveness of the playlist display.\n\n  Dependencies: \n  - None\n\nClasses:\n\n  .Playlist:\n  - Purpose: Represents the main container for the playlist component.\n  - Attributes:\n    - display: flex;\n    - flex-direction: column;\n    - overflow-y: scroll;\n    - height: 100%;\n    - padding: 0.88rem 0.88rem;\n    - background-color: #1E1E20;\n\n  .Playlist-header:\n  - Purpose: Represents the header section of the playlist.\n  - Attributes:\n    - display: flex;\n    - align-items: center;\n    - margin-bottom: 1.5rem;\n\n  .Playlist-album:\n  - Purpose: Represents the album cover image in the playlist.\n  - Attributes:\n    - width: 6.875rem;\n    - height: auto;\n\n  .Playlist-info:\n  - Purpose: Represents the information section of the playlist.\n  - Attributes:\n    - display: flex;\n    - flex-direction: column;\n    - justify-content: flex-end;\n    - margin-left: 1rem;\n\n  .Playlist input:\n  - Purpose: Represents the input field in the playlist.\n  - Attributes:\n    - width: 100%;\n    - border: 0;\n    - outline: 0;\n    - margin-top: .5rem;\n    - background: transparent;\n    - font-family: 'Poppins', sans-serif;\n    - font-size: 2.5rem;\n    - color: white;\n\n  .Playlist-save:\n  - Purpose: Represents the save button in the playlist.\n  - Attributes:\n    - cursor: pointer;\n    - width: 10rem;\n    - padding: 0.77rem 0;\n    - margin-top: 0.3rem;\n    - border-radius: 54px;\n    - border-width: 0px;\n    - background-color: #1db954;\n    - text-align: center;\n    - font-size: 0.83rem;\n    - transition: background-color 0.25s;\n    - color: #fff;\n    - font-weight: 500;\n    - display: flex;\n    - align-items: center;\n    - justify-content: center;\n\nFunctions:\n\n  None\n\nThis file defines the styling rules for the playlist component in the application, including the layout, colors, and responsiveness. It contains classes for different elements within the playlist, such as the header, album cover, information section, input field, and save button. The file does not have any functions, as it focuses on defining the visual presentation of the playlist component.",
    "src/components/Playlist/Playlist.js": "Module Overview:\n\nPurpose: The Playlist.js module is responsible for rendering a playlist component within the application. It allows users to view and interact with a playlist, including changing the playlist name, saving it to Spotify, and managing the tracks within the playlist.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- \"./Playlist.css\": A CSS file for styling the playlist component.\n- TrackList: A custom component for displaying and managing tracks within the playlist.\n\nClasses:\n\nPlaylist:\n- Purpose: Represents the playlist component that users interact with.\n- Attributes:\n  - props: An object containing properties passed to the component, such as playlist name, album art, playlist tracks, and callbacks for saving and removing tracks.\n- Methods:\n  - handleNameChange(event: Event) -> void: Updates the playlist name based on user input.\n    - Arguments:\n      - event (Event): The event object triggered by the input change.\n  - render() -> JSX.Element: Renders the playlist component with album art, playlist name input, save button, and TrackList component.\n    - Returns:\n      - JSX.Element: The rendered playlist component.\n\nFunctions:\nN/A\n\nOverall, the Playlist.js file is crucial for displaying and managing playlists within the application, allowing users to interact with and customize their playlists effectively.",
    "src/components/SearchBar/SearchBar.css": "File: SearchBar.css\n\nModule Overview:\n\n  Purpose: This file defines the styling for a search bar component used in the application. It specifies the layout, positioning, and appearance of the search input field and search button.\n  \n  Dependencies: \n  - No external dependencies.\n\nClasses:\n\n  .SearchBar:\n  - Purpose: Represents the container for the search bar component.\n  - Attributes:\n    - position: relative;\n    - display: flex;\n    - flex-direction: row;\n    - align-items: center;\n    - justify-content: flex-end;\n    - flex-grow: 1;\n    - margin-left: 1.5rem;\n\n  .SearchBar input:\n  - Purpose: Represents the search input field within the search bar.\n  - Attributes:\n    - width: 100%;\n    - padding: .5rem 7rem .5rem 1.5rem;\n    - border: 1px solid #fff;\n    - border-radius: 2rem;\n    - color: #010c3f;\n    - text-align: left;\n    - font-size: .9rem;\n    - position: relative;\n    - z-index: 1;\n\n  .SearchBar button:\n  - Purpose: Represents the search button within the search bar.\n  - Attributes:\n    - position: absolute;\n    - right: 0;\n    - cursor: pointer;\n    - padding: .5rem 1.5rem .5rem 1.5rem;\n    - border-radius: 0 2rem 2rem 0;\n    - background-color: lightgrey;\n    - text-align: right;\n    - font-size: .9rem;\n    - transition: background-color .25s;\n    - border: 1rem;\n    - color: #000000;\n    - font-weight: 500;\n    - z-index: 2;\n\nFunctions:\n\n  N/A\n\nOverall, this file defines the styling for a search bar component, including the layout and appearance of the search input field and search button. The classes within the file specify the styling properties for the search bar container, input field, and button.",
    "src/components/SearchBar/SearchBar.js": "Module Overview:\n\nPurpose: The SearchBar module provides a search input field and button for users to search for specific content within the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @fortawesome/free-solid-svg-icons: A library for accessing free solid icons.\n- @fortawesome/react-fontawesome: A library for using Font Awesome icons in React components.\n\nClasses:\n\nSearchBar:\n- Purpose: Represents the search bar component that allows users to input search terms and trigger a search action.\n- Attributes:\n  - term (string): The current search term entered by the user.\n- Methods:\n  - handleTermChange(event: Event) -> void: Updates the search term based on user input.\n  - search() -> void: Saves the search term to local storage and triggers the search action.\n  - handleKeyDown(event: KeyboardEvent) -> void: Handles the Enter key press event to trigger the search action.\n\nFunctions:\n- N/A\n\nOverall, the SearchBar module provides a user-friendly interface for users to input search terms, trigger searches, and view search results within the application.",
    "src/components/SearchResults/SearchResults.css": "File: SearchResults.css\n\nModule Overview:\n\n  Purpose: This file defines the styling for the search results component in the application. It sets the overflow behavior, padding, background color, and height of the search results container.\n\n  Dependencies: \n  - None\n\nClasses:\n\n  .SearchResults:\n  - Purpose: Represents the styling for the search results container.\n  - Attributes:\n    - overflow-y: auto - Enables vertical scrolling when the content overflows.\n    - padding: 1rem - Adds padding around the content inside the container.\n    - background-color: #1E1E20 - Sets the background color of the container to a dark shade.\n    - height: 100% - Sets the height of the container to 100% of its parent element.\n\nFunctions:\n- None\n\nThis file specifically focuses on styling the search results component in the application, ensuring a visually appealing and user-friendly display for search results.",
    "src/components/SearchResults/SearchResults.js": "Module Overview:\n\nPurpose: The SearchResults module is responsible for displaying a list of tracks based on search results and allowing users to add tracks to a playlist.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- './SearchResults.css': A CSS file for styling the SearchResults component.\n- TrackList: A component for displaying a list of tracks.\n\nClasses:\n\nSearchResults:\n- Purpose: Represents the component for displaying search results and adding tracks to a playlist.\n- Attributes: \n  - props: Contains search results, current track, and callback functions for adding and toggling tracks.\n- Methods:\n  - addTopFive() -> void: Adds the top five tracks from search results to the playlist.\n  - addTopTen() -> void: Adds the top ten tracks from search results to the playlist.\n  - addAll() -> void: Adds all tracks from search results to the playlist.\n  - render() -> JSX.Element: Renders the SearchResults component with the TrackList component.\n\nFunctions:\n- N/A\n\nOverall, the SearchResults module is essential for displaying search results and enabling users to add tracks to a playlist within the application.",
    "src/components/Track/Track.css": "File Summary: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the Track component in the application. It defines the visual appearance and behavior of the Track component, including its actions and information display.\n\n  Dependencies: \n  - No external dependencies.\n\nClasses:\n\n  Track:\n  - Purpose: Represents a single track element in the application.\n  - Attributes:\n    - None\n  - Methods:\n    - None\n\n  Track-action:\n  - Purpose: Represents the action buttons associated with a track.\n  - Attributes:\n    - display: inline-flex\n    - align-items: center\n    - justify-content: center\n    - border-radius: 50%\n    - margin: 0 0.25rem\n    - background-color: #c5c6c7\n    - color: rgba(0, 0, 0, 1)\n    - font-size: 1.5rem\n    - transition: all 0.25s ease-in-out\n    - width: 1.5rem\n    - height: 1.5rem\n  - Methods:\n    - None\n\nFunctions:\n\n  None\n\nThis file primarily focuses on defining the styles for the Track component, including its actions and information display. It ensures a consistent and visually appealing user interface for the application's music track elements.",
    "src/components/Track/Track.js": "Module Overview:\n\n  Purpose: The Track module defines a React component that represents a track in a music player application. It handles adding and removing tracks, toggling play/pause functionality, and rendering track information.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @fortawesome/react-fontawesome: A library for using Font Awesome icons in React components.\n  - @fortawesome/free-solid-svg-icons: A collection of free solid icons for use with Font Awesome.\n  - Track.css: A CSS file for styling the Track component.\n\nClasses:\n\n  Track:\n  - Purpose: Represents a track in the music player application.\n  - Attributes:\n    - props: The properties passed to the component.\n    - currentTrack: The currently playing track.\n    - isRemoval: Indicates if the track can be removed.\n    - track: The track data including name, artist, album, genre, image, and preview URL.\n  - Methods:\n    - addTrack(event: Event) -> void: Adds the track to the playlist and toggles play/pause if it's the current track.\n    - removeTrack(event: Event) -> void: Removes the track from the playlist and toggles play/pause if it's the current track.\n    - handleClick() -> void: Handles the click event on the track, toggling play/pause if a preview URL is available.\n    - renderAction() -> JSX.Element: Renders the action button based on whether the track can be removed or added.\n    - render() -> JSX.Element: Renders the track component with play/pause button, track information, and action button.\n\nFunctions:\n  N/A\n\nOverall, the Track module provides a reusable component for displaying and interacting with individual tracks in a music player application. It handles track management, play/pause functionality, and user interactions.",
    "src/components/TrackList/TrackList.css": "File: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the TrackList component in the application. It defines the width, overflow properties, and scrollbar appearance for the TrackList component.\n\n  Dependencies: \n  - None\n\nCSS Rules:\n\n  .TrackList {\n    - width: 100%;\n    - overflow-x: hidden;\n    - overflow-y: auto;\n    - scrollbar-width: thin;\n  }\n\nThis CSS rule set ensures that the TrackList component takes up the full width of its container, hides horizontal overflow, enables vertical scrolling when needed, and sets a thin scrollbar style.",
    "src/components/TrackList/TrackList.js": "Module Overview:\n\n  Purpose: The TrackList module is responsible for rendering a list of tracks in the application. It receives a list of tracks as a prop and maps over them to render individual Track components.\n\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - Track: The Track component used to display individual tracks.\n  - TrackList.css: The CSS file for styling the TrackList component.\n\nClasses:\n\n  TrackList:\n  - Purpose: Represents a list of tracks to be displayed in the application.\n  - Attributes:\n    - tracks (array): An array of track objects to be rendered.\n    - onAdd (function): A function to add a track to a playlist.\n    - isRemoval (boolean): Indicates if the track can be removed from the playlist.\n    - onRemove (function): A function to remove a track from a playlist.\n    - onToggle (function): A function to toggle the current track.\n    - currentTrack (object): The currently selected track.\n  - Methods:\n    - render() -> JSX: Renders the TrackList component with the provided tracks and props.\n\nFunctions:\n  N/A\n\nOverall, the TrackList module is essential for displaying a list of tracks in the application and managing interactions with individual tracks. It relies on React for building the user interface and the Track component for rendering each track. The TrackList.css file is used for styling the TrackList component.",
    "src/index.css": "Description: This file contains the CSS code for the body element of the application, setting the margin, padding, and font-family properties.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/index.js": "Description: This file is responsible for rendering the main application component and registering a service worker for offline functionality.\n\nDependencies: React, ReactDOM, App component, registerServiceWorker module, index.css\n\nFunctions:\n- Name: ReactDOM.render\n  Description: Renders the App component to the root element of the HTML document.\n  Parameters: <App /> (React component) - The main application component, document.getElementById('root') (DOM element) - The root element of the HTML document.\n  Returns: None\n\n- Name: registerServiceWorker\n  Description: Registers a service worker for offline functionality.\n  Parameters: None\n  Returns: None",
    "src/registerServiceWorker.js": "Description: This file registers a service worker in production to serve assets from local cache, allowing the app to load faster on subsequent visits and providing offline capabilities.\n\nDependencies: None\n\nFunctions:\n- Name: register\n  Description: Registers the service worker if the environment is set to production and the browser supports service workers.\n  Parameters: None\n  Returns: None\n\n- Name: unregister\n  Description: Unregisters the service worker if the browser supports service workers.\n  Parameters: None\n  Returns: None",
    "src/util/OpenAI.test.js": "Description: This file contains a test suite for the \"interpretPrompt\" function in the \"OpenAiAPIRequest.js\" file, which is responsible for making API calls to the OpenAI chat completions endpoint and determining appropriate strategies based on the API response.\n\nDependencies: The file depends on the \"nock\" library for mocking HTTP requests and the \"DetermineAppropriateStrategies\" function from the \"OpenAiAPIRequest.js\" file.\n\nFunctions:\n- Name: interpretPrompt\n  Description: This function is responsible for making an API call to the OpenAI chat completions endpoint with a given prompt and returning an array of strategies based on the API response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: An array of strategies (array) - The strategies determined based on the API response.",
    "src/util/OpenAiAPIRequest.js": "File Summary: generateSongRecommendations.js\n\nModule Overview:\n\nPurpose: This module provides functions for generating song recommendations based on user input prompts using the OpenAI API.\n\nDependencies:\n- API_URL_COMPLETIONS: Endpoint for general completions from the OpenAI API.\n- API_URL_CHAT_COMPLETIONS: Endpoint for chat completions from the OpenAI API.\n- API_URL_IMAGE: Endpoint for generating images using the OpenAI API.\n- process.env.REACT_APP_MY_OPENAI_API_KEY: API key for accessing the OpenAI API.\n\nFunctions:\n\ngenerateAISongRecommendations:\n- Purpose: Generates song recommendations based on a user's search input by utilizing different strategies and calling the OpenAI API.\n- Arguments:\n  - userSearchInput (string): The user's search input for generating recommendations.\n- Returns:\n  - Array: An array of song recommendations in JSON format.\n- Exceptions:\n  - None\n\nDetermineAppropriateStrategies:\n- Purpose: Interprets the user's prompt to determine suitable strategies for generating music recommendations.\n- Arguments:\n  - userSearchInput (string): The user's search input for determining strategies.\n- Returns:\n  - Array: An array of suitable strategies based on the user's prompt.\n- Exceptions:\n  - None\n\ngenerateSongRecommendations:\n- Purpose: Generates song recommendations based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating song recommendations.\n- Returns:\n  - String: The response array of song recommendations.\n- Exceptions:\n  - None\n\ngeneratePlaylistName:\n- Purpose: Generates a playlist name based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating a playlist name.\n- Returns:\n  - String: The generated playlist name.\n- Exceptions:\n  - None\n\ngenerateImage:\n- Purpose: Generates an image based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating an image.\n- Returns:\n  - String: The URL of the generated image.\n- Exceptions:\n  - None\n\nDefault Export:\n- generateSongRecommendations, generatePlaylistName, generateImage, generateTotalSongRecommendations: Exports the functions for external use.\n\nThis file serves as a crucial component for generating song recommendations, determining strategies, and interacting with the OpenAI API to enhance user experience in the application.",
    "src/util/SoundCloud.js": "Description: This file is responsible for searching and retrieving playlists from the SoundCloud API based on a given search phrase, and writing the playlist and track data to a CSV file.\n\nDependencies: The file depends on the 'node-fetch' module for making HTTP requests to the SoundCloud API, and the 'csv-writer' module for writing data to a CSV file.\n\nFunctions:\n- Name: searchPlaylists\n  Description: Searches for playlists on SoundCloud based on a given search phrase, retrieves the playlist and track data, and writes it to a CSV file.\n  Parameters: searchPhrase (string) - The search phrase to be used for searching playlists on SoundCloud.\n  Returns: None",
    "src/util/Spotify.js": "File Summary: Spotify.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for interacting with the Spotify API to access user information, search for tracks, make recommendations, and save playlists.\n  Dependencies: \n  - process.env: Environment variables for client ID, pull request ID, app ID, and redirect URI.\n  - window.location: Browser location object for accessing URL parameters.\n  - fetch: Web API for making HTTP requests.\n\nClasses:\n\n  Spotify:\n  - Purpose: Represents the Spotify API interaction module.\n  - Attributes:\n    - clientId (str): Spotify client ID obtained from app registration.\n    - awsPullRequestId (str): AWS pull request ID.\n    - awsAppId (str): AWS app ID.\n    - previewUri (str): Preview URL for AWS Amplify app.\n    - developmentProductionUri (str): Redirect URI for development/production environment.\n    - redirectUri (str): Final redirect URI for Spotify API requests.\n    - accessToken (str): Access token for Spotify API authentication.\n  - Methods:\n    - getAccessToken() -> str: Retrieves and sets the access token for Spotify API.\n    - getUserInfo() -> Promise: Fetches user information from Spotify API.\n    - openAiSearch(term: object) -> Promise: Searches for tracks based on term object.\n    - makeRecommendation(songId1, songId2, songId3, songId4, songId5) -> Promise: Generates track recommendations based on seed tracks.\n    - savePlaylist(name, trackUris) -> Promise: Saves a playlist with specified name and track URIs.\n    - logout() -> None: Logs out the user by clearing the access token.\n    - isLoggedIn() -> bool: Checks if the user is logged in.\n\nFunctions:\n\n  N/A\n\nThis file serves as the main interface for interacting with the Spotify API, handling authentication, user data retrieval, track searching, recommendation generation, playlist saving, and user session management.",
    "src/util/interpretPrompt.js": "Description: This file is responsible for making requests to the OpenAI API and interpreting the response.\nDependencies: OpenAiAPIRequest.js\nFunctions:\n- Name: interpretPrompt2\n  Description: Sends a prompt to the OpenAI API and interprets the response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: response (string) - The interpreted response from the API."
}