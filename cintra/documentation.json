{
    "jest.setup.js": "Description: This file is responsible for mocking the fetch API in Jest tests.\n\nDependencies: None\n\nFunctions:\n- Name: require\n  Description: This function is used to import the 'jest-fetch-mock' module.\n  Parameters: None\n  Returns: None",
    "public/index.html": "Description: This file is the main HTML template for the SoundTracks web application.\n\nDependencies: reset.css, Poppins and Work Sans fonts, manifest.json, djboticon.png\n\nFunctions: N/A",
    "public/reset.css": "Description: This file contains a CSS reset code that resets the default styles of HTML elements to ensure consistent rendering across different browsers.\n\nDependencies: None\n\nFunctions:\n- None",
    "src/components/App/App.css": "Description: This file contains the CSS styles for the application's user interface.\nDependencies: None\nFunctions: None",
    "src/components/App/App.js": "Description: This file represents the main component of the application, responsible for rendering the user interface and managing the state of the application.\n\nDependencies: \n- React: A JavaScript library for building user interfaces.\n- \"./App.css\": A CSS file containing styles specific to the App component.\n- \"./DALL\u00b7E 2023-03-01 20.07.50 - driving down the 101 with the top down.png\": A default album art image.\n- \"../Playlist/Playlist.js\": The Playlist component.\n- \"../SearchBar/SearchBar.js\": The SearchBar component.\n- \"../SearchResults/SearchResults.js\": The SearchResults component.\n- \"../LoginPage/LoginPage.js\": The LoginPage component.\n- \"../../util/Spotify.js\": A utility module for interacting with the Spotify API.\n- \"../../util/OpenAiAPIRequest.js\": A utility module for making requests to the OpenAI API.\n- \"@fortawesome/free-solid-svg-icons\": A library of free solid icons for use in the application.\n- \"@fortawesome/react-fontawesome\": A React component for rendering FontAwesome icons.\n\nFunctions:\n- Name: constructor\n  Description: Initializes the state of the App component.\n  Parameters: props (object) - The props passed to the component.\n  Returns: None\n\n- Name: handleLogin\n  Description: Handles the login process by obtaining an access token and updating the state accordingly.\n  Parameters: None\n  Returns: None\n\n- Name: handleLogout\n  Description: Logs the user out by resetting the state to its initial values.\n  Parameters: None\n  Returns: None\n\n- Name: interpretPrompt\n  Description: Sends a prompt to the OpenAI API for interpretation.\n  Parameters: prompt (string) - The prompt to be interpreted.\n  Returns: None\n\n- Name: openAiSearch\n  Description: Performs a search using the OpenAI API and updates the state with the search results.\n  Parameters: prompt (string) - The prompt for the search.\n  Returns: None\n\n- Name: generatePlaylistName\n  Description: Generates a playlist name using the OpenAI API and updates the state with the generated name.\n  Parameters: prompt (string) - The prompt for generating the playlist name.\n  Returns: Promise<string> - A promise that resolves to the generated playlist name.\n\n- Name: generateAlbumArt\n  Description: Generates album art using the OpenAI API and updates the state with the generated image.\n  Parameters: playlistName (string) - The name of the playlist.\n  Returns: Promise<string> - A promise that resolves to the URL of the generated album art.\n\n- Name: removeDuplicateTracks\n  Description: Removes duplicate tracks from an array of tracks.\n  Parameters: tracks (array) - An array of tracks.\n  Returns: array - An array of unique tracks.\n\n- Name: addTrack\n  Description: Adds a track to the playlist and updates the state accordingly.\n  Parameters: track (object) - The track to be added.\n  Returns: None\n\n- Name: toggleTrack\n  Description: Toggles the playback of a track.\n  Parameters: track (object) - The track to be played or paused.\n  Returns: None\n\n- Name: componentDidMount\n  Description: Lifecycle method that is called after the component has been rendered to the DOM. Checks if the user is already logged in and updates the state accordingly.\n  Parameters: None\n  Returns: None\n\n- Name: removeTrack\n  Description: Removes a track from the playlist and updates the state accordingly.\n  Parameters: track (object) - The track to be removed.\n  Returns: None\n\n- Name: updatePlaylistName\n  Description: Updates the name of the playlist.\n  Parameters: name (string) - The new name of the playlist.\n  Returns: None\n\n- Name: savePlaylist\n  Description: Saves the playlist by calling the Spotify API to create a new playlist with the selected tracks.\n  Parameters: None\n  Returns: None\n\n- Name: setToSearchState\n  Description: Sets the state to search mode.\n  Parameters: event (object) - The event object.\n  Returns: None\n\n- Name: setToPlaylistState\n  Description: Sets the state to playlist mode.\n  Parameters: event (object) - The event object.\n  Returns: None\n\n- Name: render\n  Description: Renders the user interface based on the current state.\n  Parameters: None\n  Returns: JSX - The JSX representation of the user interface.",
    "src/components/LoginPage/LoginPage.css": "Description: This file defines the styling and layout for the login page of the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/components/LoginPage/LoginPage.js": "Description: This file represents the login page component of the application, responsible for rendering the login form and handling user authentication.\nDependencies: React, './LoginPage.css'\nFunctions:\n- Name: LoginPage\n  Description: A functional component that renders the login page UI.\n  Parameters: onLogin (function) - A callback function to be executed when the login button is clicked.\n  Returns: JSX - The rendered login page UI.\n\nNo additional functions or classes are contained in this file.",
    "src/components/Playlist/Playlist.css": "Description: This file defines the styles and layout for the Playlist component in the application.\n\nDependencies: None\n\nFunctions:\n- None",
    "src/components/Playlist/Playlist.js": "Description: This file represents the Playlist component in the application, responsible for rendering a playlist with its associated tracklist and providing functionality for saving the playlist to Spotify.\nDependencies: React, \"./Playlist.css\", \"../TrackList/TrackList.js\"\nFunctions:\n- Name: constructor\n  Description: Initializes the state of the Playlist component with the playlist name and album art passed as props.\n  Parameters: props (object) - The props passed to the Playlist component.\n  Returns: None\n\n- Name: handleNameChange\n  Description: Updates the playlist name in the parent component when the input field value changes.\n  Parameters: event (object) - The event object triggered by the input field.\n  Returns: None\n\n- Name: render\n  Description: Renders the Playlist component with the playlist album art, name input field, Spotify logo, and save button. Also renders the TrackList component with the playlist tracks.\n  Parameters: None\n  Returns: JSX (React element) - The rendered Playlist component.",
    "src/components/SearchBar/SearchBar.css": "Description: This file defines the styling and functionality of the search bar component in the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n\nThe file does not contain any functions. It consists of CSS code that defines the styling of the search bar component. The CSS code includes properties for positioning, display, alignment, padding, margin, border, color, font size, and transitions. It also includes media queries for responsive design on screens with a maximum width of 600px.",
    "src/components/SearchBar/SearchBar.js": "Description: This file contains the code for the SearchBar component, which is responsible for rendering a search input field and a search button.\n\nDependencies: \n- React: The file imports the React library, which is used to create and manage React components.\n- './SearchBar.css': The file imports a CSS file that contains styling rules for the SearchBar component.\n- { faSearch } from '@fortawesome/free-solid-svg-icons': The file imports the faSearch icon from the '@fortawesome/free-solid-svg-icons' module, which is used to display a search icon in the search button.\n- { FontAwesomeIcon } from '@fortawesome/react-fontawesome': The file imports the FontAwesomeIcon component from the '@fortawesome/react-fontawesome' module, which is used to render the search icon in the search button.\n\nFunctions:\n- Name: constructor\n  Description: Initializes the state of the SearchBar component.\n  Parameters: props (object) - The props passed to the SearchBar component.\n  Returns: None\n\n- Name: handleTermChange\n  Description: Updates the state with the value of the search input field.\n  Parameters: event (object) - The event object triggered by the input field's onChange event.\n  Returns: None\n\n- Name: search\n  Description: Saves the search term in the browser's local storage and calls the onSearch function passed as a prop with the search term as an argument.\n  Parameters: None\n  Returns: None\n\n- Name: handleKeyDown\n  Description: Calls the search function when the Enter key is pressed.\n  Parameters: event (object) - The event object triggered by the input field's onKeyDown event.\n  Returns: None\n\n- Name: render\n  Description: Renders the SearchBar component.\n  Parameters: None\n  Returns: JSX - The JSX representation of the SearchBar component.",
    "src/components/SearchResults/SearchResults.css": "Description: This file defines the CSS styles for the search results section of the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/components/SearchResults/SearchResults.js": "Description: This file represents the search results component of the application, displaying a list of tracks and providing functionality to add tracks to a playlist.\nDependencies: React, './SearchResults.css', '../TrackList/TrackList.js'\nFunctions:\n- Name: addTopFive\n  Description: Adds the top five tracks from the search results to the playlist.\n  Parameters: None\n  Returns: None\n\n- Name: addTopTen\n  Description: Adds the top ten tracks from the search results to the playlist.\n  Parameters: None\n  Returns: None\n\n- Name: addAll\n  Description: Adds all tracks from the search results to the playlist.\n  Parameters: None\n  Returns: None\n\n- Name: render\n  Description: Renders the search results component, displaying the track list.\n  Parameters: None\n  Returns: JSX element representing the search results component.",
    "src/components/Track/Track.css": "Description: This file contains the CSS styles for the Track component in the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n\nThe file does not contain any functions. It only contains CSS styles for the Track component.",
    "src/components/Track/Track.js": "Description: This file represents a React component called \"Track\" that is responsible for rendering a track and its associated information in the application.\n\nDependencies: \n- React: The React library is imported to define and use React components.\n- FontAwesomeIcon: The FontAwesomeIcon component is imported from the \"@fortawesome/react-fontawesome\" module to display icons in the track component.\n- faPlay, faPause: The faPlay and faPause icons are imported from the \"@fortawesome/free-solid-svg-icons\" module to be used as play and pause icons.\n- \"./Track.css\": The Track.css file is imported to apply styling to the Track component.\n\nFunctions:\n- addTrack: This function is called when the user clicks the \"+\" button to add the track to a playlist. It takes no parameters and returns nothing.\n- removeTrack: This function is called when the user clicks the \"-\" button to remove the track from a playlist. It takes no parameters and returns nothing.\n- handleClick: This function is called when the user clicks on the track component. It toggles the play/pause state of the track. It takes no parameters and returns nothing.\n- renderAction: This function renders the action button based on whether the track is removable or not. It returns a button element.\n- render: This function renders the Track component. It displays the track's play/pause button, image, information, and a link to the track on Spotify. It returns a div element.",
    "src/components/TrackList/TrackList.css": "Description: This file manages the styling of the track list component in the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n\nDescription: This file does not contain any functions.\n\nParameters: None\n\nReturns: None",
    "src/components/TrackList/TrackList.js": "Description: This file represents the TrackList component in the application, responsible for rendering a list of tracks.\nDependencies: React, './TrackList.css', '../Track/Track.js'\nFunctions:\n- Name: render\n  Description: Renders the TrackList component and maps over the tracks array to render individual Track components.\n  Parameters: None\n  Returns: JSX - The rendered TrackList component.",
    "src/index.css": "Description: This file contains the CSS code for the body element of the application, setting the margin, padding, and font-family properties.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/index.js": "Description: This file is responsible for rendering the main application component and registering a service worker for offline functionality.\n\nDependencies: React, ReactDOM, App component, registerServiceWorker module, index.css\n\nFunctions:\n- Name: ReactDOM.render\n  Description: Renders the App component to the root element of the HTML document.\n  Parameters: <App /> (React component) - The main application component, document.getElementById('root') (DOM element) - The root element of the HTML document.\n  Returns: None\n\n- Name: registerServiceWorker\n  Description: Registers a service worker for offline functionality.\n  Parameters: None\n  Returns: None",
    "src/registerServiceWorker.js": "Description: This file registers a service worker in production to serve assets from local cache, allowing the app to load faster on subsequent visits and providing offline capabilities.\n\nDependencies: None\n\nFunctions:\n- Name: register\n  Description: Registers the service worker if the environment is set to production and the browser supports service workers.\n  Parameters: None\n  Returns: None\n\n- Name: unregister\n  Description: Unregisters the service worker if the browser supports service workers.\n  Parameters: None\n  Returns: None",
    "src/util/OpenAI.test.js": "Description: This file contains a test suite for the \"interpretPrompt\" function in the \"OpenAiAPIRequest.js\" file, which is responsible for making API calls to the OpenAI chat completions endpoint and determining appropriate strategies based on the API response.\n\nDependencies: The file depends on the \"nock\" library for mocking HTTP requests and the \"DetermineAppropriateStrategies\" function from the \"OpenAiAPIRequest.js\" file.\n\nFunctions:\n- Name: interpretPrompt\n  Description: This function is responsible for making an API call to the OpenAI chat completions endpoint with a given prompt and returning an array of strategies based on the API response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: An array of strategies (array) - The strategies determined based on the API response.",
    "src/util/OpenAiAPIRequest.js": "Description: This file contains functions for generating song recommendations, playlist names, and images based on user prompts using the OpenAI API.\n\nDependencies: process.env, fetch\n\nFunctions:\n- Name: generateTotalSongRecommendations\n  Description: Creates song recommendations based on a prompt by determining appropriate strategies, generating recommendations for each strategy, and combining and randomizing the recommendations.\n  Parameters: prompt (string) - The user's prompt for song recommendations.\n  Returns: recommendations (array) - An array of song recommendations.\n\n- Name: DetermineAppropriateStrategies\n  Description: Interprets the prompt to determine which batch strategies make sense for generating song recommendations.\n  Parameters: prompt (string) - The user's prompt for song recommendations.\n  Returns: strategies (array) - An array of numbers representing the suitable strategies for generating recommendations.\n\n- Name: generateSongRecommendations\n  Description: Generates song recommendations based on a prompt using the OpenAI API.\n  Parameters: prompt (string) - The user's prompt for song recommendations.\n  Returns: recommendations (array) - An array of song recommendations.\n\n- Name: generatePlaylistName\n  Description: Generates a playlist name based on a prompt using the OpenAI API.\n  Parameters: prompt (string) - The user's prompt for the playlist name.\n  Returns: playlistName (string) - The generated playlist name.\n\n- Name: generateImage\n  Description: Generates an image based on a prompt using the OpenAI API.\n  Parameters: prompt (string) - The user's prompt for the image.\n  Returns: imageUrl (string) - The URL of the generated image.",
    "src/util/SoundCloud.js": "Description: This file is responsible for searching and retrieving playlists from the SoundCloud API based on a given search phrase, and writing the playlist and track data to a CSV file.\n\nDependencies: The file depends on the 'node-fetch' module for making HTTP requests to the SoundCloud API, and the 'csv-writer' module for writing data to a CSV file.\n\nFunctions:\n- Name: searchPlaylists\n  Description: Searches for playlists on SoundCloud based on a given search phrase, retrieves the playlist and track data, and writes it to a CSV file.\n  Parameters: searchPhrase (string) - The search phrase to be used for searching playlists on SoundCloud.\n  Returns: None",
    "src/util/Spotify.js": "Description: This file handles Spotify API interactions for user authentication, user information retrieval, music search, recommendations, playlist creation, and user logout functionality.\n\nDependencies: None\n\nFunctions:\n- Name: getAccessToken\n  Description: Retrieves the access token for Spotify API authentication.\n  Parameters: None\n  Returns: accessToken (string) - The access token for API authentication.\n\n- Name: getUserInfo\n  Description: Retrieves the user's information from the Spotify API.\n  Parameters: None\n  Returns: Object { username (string), avatar (string) } - User's display name and avatar URL.\n\n- Name: openAiSearch\n  Description: Searches for a track on Spotify based on the provided term.\n  Parameters: term (string) - The search term for the track.\n  Returns: Array of Objects { id (string), name (string), artist (string), album (string), uri (string), preview_url (string), image (string), spotifyLogo (string), spotifyLink (string) } - Information about the searched track.\n\n- Name: makeRecommendation\n  Description: Generates music recommendations based on seed tracks.\n  Parameters: songId1, songId2, songId3, songId4, songId5 (string) - IDs of the seed tracks for recommendations.\n  Returns: Array of Objects { id (string), name (string), artist (string), album (string), uri (string), preview_url (string), spotifyLogo (string), spotifyLink (string) } - Recommended tracks.\n\n- Name: savePlaylist\n  Description: Creates a new playlist on the user's Spotify account and adds tracks to it.\n  Parameters: name (string) - Name of the playlist, trackUris (array of strings) - URIs of the tracks to add to the playlist.\n  Returns: None\n\n- Name: logout\n  Description: Logs the user out by clearing the access token.\n  Parameters: None\n  Returns: None\n\n- Name: isLoggedIn\n  Description: Checks if the user is currently logged in.\n  Parameters: None\n  Returns: boolean - True if the user is logged in, otherwise False.",
    "src/util/interpretPrompt.js": "Description: This file is responsible for making requests to the OpenAI API and interpreting the response.\nDependencies: OpenAiAPIRequest.js\nFunctions:\n- Name: interpretPrompt2\n  Description: Sends a prompt to the OpenAI API and interprets the response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: response (string) - The interpreted response from the API."
}