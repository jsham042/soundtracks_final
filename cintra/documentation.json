{
    "jest.setup.js": "Description: This file is responsible for mocking the fetch API in Jest tests.\n\nDependencies: None\n\nFunctions:\n- Name: require\n  Description: This function is used to import the 'jest-fetch-mock' module.\n  Parameters: None\n  Returns: None",
    "public/index.html": "Description: This file is the main HTML template for the SoundTracks web application.\n\nDependencies: reset.css, Poppins and Work Sans fonts, manifest.json, djboticon.png\n\nFunctions: N/A",
    "public/reset.css": "Description: This file contains a CSS reset code that resets the default styles of HTML elements to ensure consistent rendering across different browsers.\n\nDependencies: None\n\nFunctions:\n- None",
    "src/components/App/App.css": "Page Title: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the application's user interface, defining the visual appearance and layout of various components.\n\n  Dependencies: \n  - None\n\nContent Overview:\n\n  This file includes CSS rules for styling different elements of the application, such as fonts, colors, layouts, and animations. It defines the visual presentation of the user interface, ensuring a consistent and appealing design across the application.\n\n  The file includes styling rules for headers, buttons, user information display, search and playlist sections, navigation elements, and responsive design adjustments for mobile devices. It also includes hover and active states for interactive elements, ensuring a smooth user experience.\n\n  Developers can refer to this file to understand and modify the visual styling of the application, making adjustments to colors, fonts, sizes, layouts, and animations as needed.",
    "src/components/App/App.js": "Page Title: data_processing.py\n\nModule Overview:\n\n  Purpose: This module handles data processing tasks such as cleaning, transforming, and analyzing data for the application.\n\n  Dependencies: \n  - pandas: A library for data manipulation and analysis.\n  - numpy: A library for numerical computing.\n\nFunctions:\n\n  clean_data(data: DataFrame) -> DataFrame:\n  - Purpose: Cleans the input data by removing missing values and duplicates.\n  - Arguments:\n    - data (DataFrame): The input data to be cleaned.\n  - Returns:\n    - DataFrame: The cleaned data without missing values and duplicates.\n  - Exceptions:\n    - ValueError: If the input data is not a pandas DataFrame.\n\n  transform_data(data: DataFrame, transformation_type: str) -> DataFrame:\n  - Purpose: Transforms the input data based on the specified transformation type.\n  - Arguments:\n    - data (DataFrame): The input data to be transformed.\n    - transformation_type (str): The type of transformation to apply.\n  - Returns:\n    - DataFrame: The transformed data.\n  - Exceptions:\n    - ValueError: If the transformation type is not valid.\n\n  analyze_data(data: DataFrame, analysis_type: str) -> dict:\n  - Purpose: Analyzes the input data based on the specified analysis type.\n  - Arguments:\n    - data (DataFrame): The input data to be analyzed.\n    - analysis_type (str): The type of analysis to perform.\n  - Returns:\n    - dict: A dictionary containing the results of the analysis.\n  - Exceptions:\n    - ValueError: If the analysis type is not valid.",
    "src/components/LoginPage/LoginPage.css": "Description: This file defines the styling and layout for the login page of the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/components/LoginPage/LoginPage.js": "Description: This file represents the login page component of the application, responsible for rendering the login form and handling user authentication.\nDependencies: React, './LoginPage.css'\nFunctions:\n- Name: LoginPage\n  Description: A functional component that renders the login page UI.\n  Parameters: onLogin (function) - A callback function to be executed when the login button is clicked.\n  Returns: JSX - The rendered login page UI.\n\nNo additional functions or classes are contained in this file.",
    "src/components/Playlist/Playlist.css": "File Summary: Playlist.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the playlist component in the application. It defines the layout, colors, animations, and responsiveness of the playlist display.\n  \n  Dependencies: \n  - No external dependencies.\n\nClasses:\n\n  .Playlist:\n  - Purpose: Represents the main container for the playlist component.\n  - Attributes:\n    - display: flex;\n    - flex-direction: column;\n    - overflow-y: scroll;\n    - height: 100%;\n    - padding: 0.88rem 0.88rem;\n    - background-color: #1E1E20;\n\n  .Playlist-header:\n  - Purpose: Represents the header section of the playlist.\n  - Attributes:\n    - display: flex;\n    - align-items: center;\n    - margin-bottom: 1.5rem;\n\n  .regenerate-button:\n  - Purpose: Represents a button to regenerate the playlist.\n  - Attributes:\n    - background-color: rgba(29, 185, 84, 0.8);\n    - color: white;\n    - border: none;\n    - padding: 5px 10px;\n    - border-radius: 20px;\n    - cursor: pointer;\n    - font-size: 0.8rem;\n    - margin-top: 10px;\n    - transition: background-color 0.3s ease;\n\n  (and so on for other classes defined in the file)\n\nFunctions:\n\n  N/A\n\nThis file primarily focuses on defining the styles for the playlist component in the application. It includes rules for the layout, colors, animations, and responsiveness of the playlist display. The classes defined in this file help structure and style the playlist component for a visually appealing and user-friendly experience.",
    "src/components/Playlist/Playlist.js": "Module Overview:\n\nPurpose: The Playlist module is responsible for rendering a playlist component that allows users to view and interact with a playlist. It includes features such as displaying album art, editing playlist name, saving to Spotify, and managing tracks.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- FontAwesomeIcon: A library for displaying icons in React applications.\n- TrackList: A component for displaying a list of tracks in the playlist.\n\nClasses:\n\nPlaylist:\n- Purpose: Represents the playlist component that displays album art, playlist name, and tracks.\n- Attributes:\n  - loadingPlaylistName (bool): Indicates if the playlist name is being loaded.\n  - loadingAlbumArt (bool): Indicates if the album art is being loaded.\n  - showNameEditor (bool): Indicates if the playlist name editor is visible.\n- Methods:\n  - handleNameChange(event: Event) -> void: Updates the playlist name based on user input.\n  - handleShowNameEditor() -> void: Toggles the visibility of the playlist name editor.\n  - render() -> JSX.Element: Renders the playlist component with album art, playlist name, and track list.\n\nFunctions:\nN/A\n\nOverall, the Playlist module provides a user-friendly interface for managing and interacting with playlists, including features like editing playlist name, saving to Spotify, and managing tracks.",
    "src/components/SearchBar/SearchBar.css": "File Summary: SearchBar.css\n\nModule Overview:\n\n  Purpose: The SearchBar.css file contains styling rules for the search bar component in the application. It defines the layout, appearance, and behavior of the search bar.\n\n  Dependencies: \n  - No external dependencies.\n\nClasses:\n\n  .SearchBar:\n  - Purpose: Represents the main container for the search bar component.\n  - Attributes:\n    - position: relative\n    - display: flex\n    - flex-direction: row\n    - align-items: center\n    - justify-content: flex-end\n    - flex-grow: 1\n    - margin-left: 1rem\n    - width: 100%\n  - Methods: N/A\n\n  .SearchBar input:\n  - Purpose: Represents the input field within the search bar.\n  - Attributes:\n    - width: 100%\n    - padding: .5rem 7rem .5rem 1.5rem\n    - border: 1px solid #fff\n    - border-radius: 2rem\n    - margin-right: 0\n    - color: #010c3f\n    - text-align: left\n    - font-size: .9rem\n    - position: relative\n    - z-index: 1\n  - Methods: N/A\n\n  .SearchBar button:\n  - Purpose: Represents the button within the search bar.\n  - Attributes:\n    - position: absolute\n    - right: 0\n    - cursor: pointer\n    - padding: .5rem 1.5rem .5rem 1.5rem\n    - border-radius: 0 2rem 2rem 0\n    - background-color: lightgrey\n    - text-align: right\n    - font-size: .9rem\n    - transition: background-color .25s\n    - border: 1rem\n    - color: #000000\n    - font-weight: 500\n    - z-index: 2\n  - Methods: N/A\n\nFunctions:\n  N/A\n\nOverall, the SearchBar.css file defines the styling for the search bar component, including the main container, input field, and button. The styles are responsive, with adjustments made for smaller screen sizes using media queries.",
    "src/components/SearchBar/SearchBar.js": "Page Title: SearchBar.js\n\nModule Overview:\n\n  Purpose: The SearchBar module provides a search bar component for users to input search terms and perform searches. It also includes a toggle feature for auto-generating playlist names and album art based on the search term.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - SearchBar.css: Stylesheet for the SearchBar component.\n  - @fortawesome/free-solid-svg-icons: Library for accessing free solid icons.\n  - @fortawesome/react-fontawesome: Library for using Font Awesome icons in React components.\n\nClasses:\n\n  SearchBar:\n  - Purpose: Represents the search bar component.\n  - Attributes:\n    - term (str): The search term entered by the user.\n    - autoGenerate (bool): Indicates whether auto-generation of playlist names and album art is enabled.\n  - Methods:\n    - handleTermChange(event: Event) -> None: Updates the search term based on user input.\n    - handleAutoGenerateToggle(event: Event) -> None: Toggles the auto-generate feature.\n    - search() -> None: Performs a search based on the user input and auto-generate settings.\n    - handleKeyDown(event: Event) -> None: Handles key events, triggering search on Enter key press.\n    - render() -> JSX.Element: Renders the search bar component with input field, search button, and auto-generate toggle.\n\nFunctions:\n  N/A\n\nOverall, the SearchBar module provides a user-friendly interface for searching within the application, with additional functionality for auto-generating playlist names and album art.",
    "src/components/SearchResults/SearchResults.css": "File: SearchResults.css\n\nModule Overview:\n\n  Purpose: This file defines the styling for the search results component in the application. It specifies the layout, colors, and animations for the search results display.\n  \n  Dependencies: \n  - None\n\nClasses:\n\n  .SearchResults:\n  - Purpose: Represents the container for displaying search results.\n  - Attributes:\n    - display: flex;\n    - flex-direction: column;\n    - overflow-y: scroll;\n    - height: 100%;\n    - padding: 0.88rem 0.88rem;\n    - background-color: #1E1E20;\n\n  .action-button:\n  - Purpose: Represents a clickable button for performing actions on search results.\n  - Attributes:\n    - background-color: #282828;\n    - color: #fff;\n    - border: 1px solid #1db954;\n    - border-radius: 4px;\n    - padding: 4px 16px;\n    - font-size: 14px;\n    - font-weight: 500;\n    - text-transform: uppercase;\n    - cursor: pointer;\n    - transition: all 0.2s ease;\n    - margin-right: 10px;\n    - margin-bottom: 10px;\n\n  .action-buttons:\n  - Purpose: Represents a container for arranging action buttons in a row.\n  - Attributes:\n    - display: flex;\n    - flex-wrap: wrap;\n    - justify-content: space-between;\n\n  .action-buttons-mobile:\n  - Purpose: Represents a container for action buttons on mobile devices.\n  - Attributes:\n    - display: none;\n\nFunctions:\n\n  N/A\n\nOverall, the SearchResults.css file defines the styling for the search results component, including the layout of the results container, the design of action buttons, and responsiveness for mobile devices.",
    "src/components/SearchResults/SearchResults.js": "Module Overview:\n\nPurpose: The SearchResults module is responsible for displaying search results for tracks and providing actions to add tracks to a playlist, fetch more recommendations, and clear search results.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- \"./SearchResults.css\": A CSS file for styling the SearchResults component.\n- TrackList: A component for displaying a list of tracks.\n- Spotify: A utility module for making API calls to fetch recommendations.\n\nClasses:\n\nSearchResults:\n- Purpose: Represents the component for displaying search results and handling user actions.\n- Attributes:\n  - props: Contains search results, functions for adding tracks, toggling tracks, and updating search results.\n- Methods:\n  - addTopFive(): Adds the top five tracks to the playlist.\n  - addTopTen(): Adds the top ten tracks to the playlist.\n  - addAll(): Adds all tracks to the playlist.\n  - fetchMoreRecommendations(): Fetches more recommendations based on the top 5 tracks.\n  - clearSearchResults(): Clears the search results.\n  - render(): Renders the SearchResults component with action buttons and TrackList.\n\nFunctions: N/A\n\nOverall, the SearchResults module is crucial for displaying search results, managing user actions, and interacting with the Spotify API to provide recommendations based on user preferences.",
    "src/components/ToastNotification/ToastNotification.css": "File Summary: ToastNotification.css\n\nModule Overview:\n\n  Purpose: This file contains the base styling for the ToastNotification component, which is used to display non-intrusive notifications to users.\n  Dependencies: This file does not have any external dependencies.\n\nClasses:\n\n  N/A\n\nFunctions:\n\n  N/A\n\nCSS Styles:\n\n  - .ToastNotification: Represents the main container for the notification.\n    - position: fixed;\n    - bottom: 20px;\n    - right: 20px;\n    - width: auto;\n    - padding: 16px 24px;\n    - background-color: #323232;\n    - color: #ffffff;\n    - font-size: 16px;\n    - border-radius: 8px;\n    - box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    - z-index: 1000;\n    - display: flex;\n    - align-items: center;\n    - justify-content: space-between;\n    - transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;\n\n  - .ToastNotification-enter: Animation for entering the notification.\n    - transform: translateY(100%);\n    - opacity: 0;\n\n  - .ToastNotification-enter-active: Animation for active entering state.\n    - transform: translateY(0);\n    - opacity: 1;\n\n  - .ToastNotification-exit: Animation for exiting the notification.\n    - transform: translateY(0);\n    - opacity: 1;\n\n  - .ToastNotification-exit-active: Animation for active exiting state.\n    - transform: translateY(100%);\n    - opacity: 0;\n\n  - .ToastNotification-icon: Represents the icon within the notification.\n    - margin-right: 12px;\n\n  - .ToastNotification-close: Represents the close button for the notification.\n    - background: none;\n    - border: none;\n    - color: inherit;\n    - font-size: 24px;\n    - cursor: pointer;\n\n  - .ToastNotification-message: Represents the message content within the notification.\n    - flex: 1;\n    - margin: 0 12px;\n\nThis file provides the essential styling for the ToastNotification component, including positioning, colors, animations, and layout. Developers can use these predefined styles to ensure consistency and a visually appealing user experience for notifications in the application.",
    "src/components/ToastNotification/ToastNotification.js": "File Summary: ToastNotification.js\n\nModule Overview:\n\n  Purpose: This module defines a ToastNotification component that displays a message for a specified duration.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - useState: A React hook for managing state in functional components.\n  - useEffect: A React hook for handling side effects in functional components.\n\nClasses: N/A\n\nFunctions:\n\n  ToastNotification:\n  - Purpose: Renders a toast notification with a message for a specified duration.\n  - Arguments:\n    - message (string): The message to be displayed in the notification.\n    - duration (number): The duration in milliseconds for which the notification should be visible (default is 3000ms).\n  - Returns:\n    - JSX element: The toast notification component.\n  - Exceptions: N/A\n\nOverall, this file contains a functional component called ToastNotification that displays a message in a toast-style notification for a specified duration. It utilizes React's useState and useEffect hooks to manage the visibility of the notification.",
    "src/components/Track/Track.css": "File Summary: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the Track component in the application. It defines the visual appearance and behavior of the Track component, including its actions and information display.\n\n  Dependencies: \n  - None\n\nClasses:\n\n  Track:\n  - Purpose: Represents a single track element in the application.\n  - Attributes:\n    - None\n  - Methods:\n    - None\n\n  Track-action:\n  - Purpose: Represents the action buttons associated with a track.\n  - Attributes:\n    - display: inline-flex\n    - align-items: center\n    - justify-content: center\n    - border-radius: 50%\n    - margin: 0 0.7rem 0 0.25rem\n    - border: 1px solid #c5c6c7\n    - background-color: #c5c6c7\n    - color: rgba(0, 0, 0, 1)\n    - font-size: 1.5rem\n    - transition: all 0.25s ease-in-out\n    - width: 1.5rem\n    - height: 1.5rem\n    - min-width: 1.5rem\n    - min-height: 1.5rem\n  - Methods:\n    - None\n\nFunctions:\n\n  None\n\nOverall, this file defines the styling rules for the Track component, including its actions and information display. It ensures a consistent and visually appealing design for the track elements in the application.",
    "src/components/Track/Track.js": "Module Overview:\n\nPurpose: The Track module is responsible for rendering a track component that displays information about a music track, such as the track name, artist, album, and genre. It also allows users to add or remove the track from a playlist and play the track.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- FontAwesomeIcon: A library for displaying icons in React components.\n- ToastNotification: A custom component for displaying toast notifications.\n- \"./Track.css\": A CSS file for styling the Track component.\n\nClasses:\n\nTrack:\n- Purpose: Represents a music track component that displays track information and allows users to interact with the track.\n- Attributes:\n  - props: Contains the properties passed to the Track component, such as the track data and event handlers.\n  - state:\n    - toastMessage (str): The message to display in the toast notification.\n- Methods:\n  - addTrack(event): Adds the track to a playlist and toggles the track if it is the current track.\n  - removeTrack(event): Removes the track from a playlist and toggles the track if it is the current track.\n  - handleClick(): Handles the click event on the track component, plays the track, and toggles the track.\n  - renderAction(): Renders the action button based on whether the track is being added or removed from a playlist.\n  - render(): Renders the track component with track information, play button, album art, and action button.\n\nFunctions:\nN/A\n\nOverall, the Track module provides a user-friendly interface for interacting with music tracks, allowing users to add or remove tracks from a playlist and play the tracks. It also includes error handling for cases where the audio preview is not available.",
    "src/components/TrackList/TrackList.css": "File: TrackList.css\n\nModule Overview:\n\n  Purpose: This file contains styling rules for the TrackList component, which is used to display a list of tracks in the application.\n  Dependencies: None\n\nClasses:\n\n  TrackList:\n  - Purpose: Represents the styling for the TrackList component.\n  - Attributes:\n    - width (100%): Sets the width of the TrackList component to 100% of its container.\n    - overflow-x (hidden): Hides horizontal overflow content.\n    - overflow-y (scroll): Enables vertical scrolling for overflow content.\n  - Methods: None\n\nFunctions: None\n\nOverall, this file defines the styling for the TrackList component, ensuring that it is displayed correctly within the application with the specified width and scrolling behavior.",
    "src/components/TrackList/TrackList.js": "Module Overview:\n\n  Purpose: The TrackList module is responsible for rendering a list of tracks in the application. It receives a list of tracks as a prop and maps over each track to render a Track component for each one.\n\n  Dependencies: \n  - React: The JavaScript library for building user interfaces.\n  - Track: The Track component used to display individual tracks.\n  - TrackList.css: The CSS file for styling the TrackList component.\n\nClasses:\n\n  TrackList:\n  - Purpose: Represents a list of tracks to be displayed in the application.\n  - Attributes:\n    - tracks (array): An array of track objects to be rendered.\n    - onAdd (function): Function to add a track to a playlist.\n    - isRemoval (boolean): Indicates if the track is for removal from a playlist.\n    - onRemove (function): Function to remove a track from a playlist.\n    - onToggle (function): Function to toggle the current track.\n    - currentTrack (object): The currently selected track.\n  - Methods:\n    - render() -> JSX.Element: Renders the TrackList component with the list of tracks.\n          - Returns:\n            - JSX.Element: The rendered TrackList component.\n\nFunctions:\nNo functions are defined in this file.",
    "src/index.css": "Description: This file contains the CSS code for the body element of the application, setting the margin, padding, and font-family properties.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/index.js": "Description: This file is responsible for rendering the main application component and registering a service worker for offline functionality.\n\nDependencies: React, ReactDOM, App component, registerServiceWorker module, index.css\n\nFunctions:\n- Name: ReactDOM.render\n  Description: Renders the App component to the root element of the HTML document.\n  Parameters: <App /> (React component) - The main application component, document.getElementById('root') (DOM element) - The root element of the HTML document.\n  Returns: None\n\n- Name: registerServiceWorker\n  Description: Registers a service worker for offline functionality.\n  Parameters: None\n  Returns: None",
    "src/registerServiceWorker.js": "Description: This file registers a service worker in production to serve assets from local cache, allowing the app to load faster on subsequent visits and providing offline capabilities.\n\nDependencies: None\n\nFunctions:\n- Name: register\n  Description: Registers the service worker if the environment is set to production and the browser supports service workers.\n  Parameters: None\n  Returns: None\n\n- Name: unregister\n  Description: Unregisters the service worker if the browser supports service workers.\n  Parameters: None\n  Returns: None",
    "src/util/OpenAI.test.js": "Description: This file contains a test suite for the \"interpretPrompt\" function in the \"OpenAiAPIRequest.js\" file, which is responsible for making API calls to the OpenAI chat completions endpoint and determining appropriate strategies based on the API response.\n\nDependencies: The file depends on the \"nock\" library for mocking HTTP requests and the \"DetermineAppropriateStrategies\" function from the \"OpenAiAPIRequest.js\" file.\n\nFunctions:\n- Name: interpretPrompt\n  Description: This function is responsible for making an API call to the OpenAI chat completions endpoint with a given prompt and returning an array of strategies based on the API response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: An array of strategies (array) - The strategies determined based on the API response.",
    "src/util/OpenAiAPIRequest.js": "File Summary: generateSongRecommendations.js\n\nModule Overview:\n\nPurpose: This module provides functions for generating song recommendations based on user input prompts using the OpenAI API.\n\nDependencies:\n- API_URL_COMPLETIONS: Endpoint for general completions from the OpenAI API.\n- API_URL_CHAT_COMPLETIONS: Endpoint for chat completions from the OpenAI API.\n- API_URL_IMAGE: Endpoint for generating images using the OpenAI API.\n- process.env.REACT_APP_MY_OPENAI_API_KEY: API key for accessing the OpenAI API.\n\nFunctions:\n\ngenerateAISongRecommendations:\n- Purpose: Generates song recommendations based on a user's search input by utilizing different strategies and calling the OpenAI API.\n- Arguments:\n  - userSearchInput (string): The user's search input for generating recommendations.\n- Returns:\n  - Array: An array of song recommendations in JSON format.\n- Exceptions:\n  - None\n\nDetermineAppropriateStrategies:\n- Purpose: Interprets the user's prompt to determine suitable strategies for generating music recommendations.\n- Arguments:\n  - userSearchInput (string): The user's search input for determining strategies.\n- Returns:\n  - Array: An array of suitable strategies based on the user's prompt.\n- Exceptions:\n  - Handles errors and fallbacks to a wildcard strategy if no strategies are selected.\n\ngenerateSongRecommendations:\n- Purpose: Generates song recommendations based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating song recommendations.\n- Returns:\n  - String: The response array of song recommendations.\n- Exceptions:\n  - Handles errors during the API call.\n\ngeneratePlaylistName:\n- Purpose: Generates a playlist name based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating a playlist name.\n- Returns:\n  - String: The generated playlist name.\n- Exceptions:\n  - Handles errors during the API call.\n\ngenerateImage:\n- Purpose: Generates an image based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating an image.\n- Returns:\n  - String: The URL of the generated image.\n- Exceptions:\n  - Handles errors during the API call.\n\nDefault Export:\n- Contains functions for generating song recommendations, playlist names, images, and the total song recommendations using the OpenAI API.\n\nThis file serves as a crucial component for generating music recommendations and interacting with the OpenAI API to enhance user experiences.",
    "src/util/SoundCloud.js": "Description: This file is responsible for searching and retrieving playlists from the SoundCloud API based on a given search phrase, and writing the playlist and track data to a CSV file.\n\nDependencies: The file depends on the 'node-fetch' module for making HTTP requests to the SoundCloud API, and the 'csv-writer' module for writing data to a CSV file.\n\nFunctions:\n- Name: searchPlaylists\n  Description: Searches for playlists on SoundCloud based on a given search phrase, retrieves the playlist and track data, and writes it to a CSV file.\n  Parameters: searchPhrase (string) - The search phrase to be used for searching playlists on SoundCloud.\n  Returns: None",
    "src/util/Spotify.js": "File Summary: Spotify.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for interacting with the Spotify API to access user information, search for tracks, make recommendations, and create playlists within the application.\n  Dependencies: \n  - process.env: Environment variables for configuration.\n  - window.location: Browser window location for handling access tokens.\n  - fetch: Web API for making HTTP requests.\n\nClasses:\n\n  Spotify:\n  - Purpose: Represents the main interface for interacting with the Spotify API.\n  - Attributes:\n    - clientId (str): The client ID obtained from registering the app.\n    - awsPullRequestId (str): The AWS pull request ID.\n    - awsAppId (str): The AWS app ID.\n    - previewUri (str): The preview URI for the application.\n    - developmentProductionUri (str): The redirect URI for development/production.\n    - redirectUri (str): The final redirect URI for authentication.\n    - accessToken (str): The access token for Spotify API requests.\n  - Methods:\n    - getAccessToken() -> str: Retrieves the access token for API requests.\n    - getUserInfo() -> Promise: Fetches user information from the Spotify API.\n    - getArtistGenres(artistId: str, accessToken: str) -> Promise: Retrieves the genres of an artist.\n    - openAiSearch(term: object) -> Promise: Searches for tracks using OpenAI.\n    - makeRecommendation(trackIds: array) -> Promise: Generates track recommendations based on seed tracks.\n    - savePlaylist(name: str, trackUris: array) -> Promise: Saves a playlist with specified tracks.\n    - logout() -> void: Logs out the user by clearing the access token.\n    - isLoggedIn() -> bool: Checks if the user is logged in.\n\nFunctions:\n\n  No standalone functions are defined in this module. All functionality is encapsulated within the Spotify class.\n\nOverall, this file serves as a central hub for handling Spotify API interactions, including authentication, user data retrieval, track searching, recommendation generation, and playlist management.",
    "src/util/Spotify.test.js": "File Summary: Spotify.js\n\nModule Overview:\n\n  Purpose: The Spotify module provides functionality for making recommendations based on seed tracks from the Spotify API.\n  Dependencies: \n  - jest: Testing framework for mocking fetch requests.\n  - global.fetch: Browser API for making HTTP requests.\n\nFunctions:\n\n  Spotify.makeRecommendation(seedTrack1: string, seedTrack2: string, ...seedTracks: string) -> Array:\n  - Purpose: Fetches recommendations from the Spotify API based on seed tracks and returns formatted track data.\n  - Arguments:\n    - seedTrack1 (string): The ID of the first seed track.\n    - seedTrack2 (string): The ID of the second seed track.\n    - seedTracks (string): Additional seed track IDs.\n  - Returns:\n    - Array: An array of formatted track data objects.\n  - Exceptions:\n    - None\n\nClasses:\n\n  None\n\nThis file contains a function called Spotify.makeRecommendation that fetches recommendations from the Spotify API based on seed tracks provided as arguments. The function returns an array of formatted track data objects. The file also includes setup for mocking fetch requests using jest for testing purposes.",
    "src/util/interpretPrompt.js": "Description: This file is responsible for making requests to the OpenAI API and interpreting the response.\nDependencies: OpenAiAPIRequest.js\nFunctions:\n- Name: interpretPrompt2\n  Description: Sends a prompt to the OpenAI API and interprets the response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: response (string) - The interpreted response from the API."
}