{
    "jest.setup.js": "Description: This file is responsible for mocking the fetch API in Jest tests.\n\nDependencies: None\n\nFunctions:\n- Name: require\n  Description: This function is used to import the 'jest-fetch-mock' module.\n  Parameters: None\n  Returns: None",
    "public/index.html": "Description: This file is the main HTML template for the SoundTracks web application.\n\nDependencies: reset.css, Poppins and Work Sans fonts, manifest.json, djboticon.png\n\nFunctions: N/A",
    "public/reset.css": "Description: This file contains a CSS reset code that resets the default styles of HTML elements to ensure consistent rendering across different browsers.\n\nDependencies: None\n\nFunctions:\n- None",
    "src/components/App/App.css": "Page Title: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the application's HTML elements, defining the visual appearance and layout of the user interface.\n\n  Dependencies: \n  - None\n\nContent Overview:\n\nThe styles.css file includes CSS rules for various HTML elements such as headings, containers, buttons, and user interface components. It defines properties like font styles, colors, sizes, margins, padding, and positioning to create a visually appealing and consistent design across the application.\n\nSelectors like h1, h2, .App, .Header, .user-info, .Logout-button, .SearchAndPlaylist, .SearchSection, .PlaylistSection, .SearchSectionHeader, and .PlaylistSectionHeader are used to target specific elements and apply styling rules to them.\n\nThe file also includes hover effects for interactive elements like buttons and links, as well as layout properties for organizing content within different sections of the application.\n\nOverall, the styles.css file plays a crucial role in defining the visual presentation of the application and ensuring a cohesive user experience.",
    "src/components/App/App.js": "Module Overview:\n\nPurpose: The App.js file is a crucial component of the application, serving as the main entry point for the user interface. It handles user authentication, search functionality, playlist management, and interaction with external APIs.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- FontAwesome: A library of icons used for visual elements.\n- Spotify: A utility for interacting with the Spotify API.\n- OpenAiAPIRequest: A utility for making requests to the OpenAI API.\n\nClasses:\n\nApp:\n- Purpose: Represents the main application component responsible for rendering the user interface and managing user interactions.\n- Attributes:\n  - loggedIn (bool): Indicates if the user is logged in.\n  - searchResults (array): Stores the search results retrieved from the API.\n  - playlistName (string): The name of the current playlist.\n  - playlistTracks (array): Tracks added to the playlist.\n  - isFetching (bool): Indicates if data is being fetched.\n  - searchState (bool): Indicates the current state of the search functionality.\n  - albumArt (string): URL of the album art image.\n  - currentTrack (object): The currently playing track.\n  - spotifyUsername (string): The username of the Spotify user.\n  - spotifyAvatar (string): URL of the user's avatar image.\n  - loadingAlbumArt (bool): Indicates if album art is being loaded.\n  - loadingPlaylistName (bool): Indicates if playlist name is being generated.\n- Methods:\n  - handleLogin(): Handles user authentication using the Spotify utility.\n  - handleLogout(): Logs the user out and resets the application state.\n  - interpretPrompt(prompt: string): Interprets a prompt using the OpenAI API.\n  - openAiSearch(userSearchInput: string): Initiates a search using the OpenAI API and Spotify.\n  - generatePlaylistName(prompt: string): Generates a playlist name based on a prompt.\n  - generateAlbumArt(playlistName: string): Generates album art based on the playlist name.\n  - removeDuplicateTracks(tracks: array): Removes duplicate tracks from the search results.\n  - addTrack(track: object): Adds a track to the playlist.\n  - toggleTrack(track: object): Toggles playback of a track.\n  - componentDidMount(): Handles component initialization and data retrieval from local storage.\n  - removeTrack(track: object): Removes a track from the playlist.\n  - updatePlaylistName(name: string): Updates the playlist name.\n  - savePlaylist(): Saves the current playlist to the Spotify account.\n  - setToSearchState(event): Sets the application state to search mode.\n  - setToPlaylistState(event): Sets the application state to playlist mode.\n\nFunctions:\n- No standalone functions are defined in this file.\n\nThis summary provides an overview of the App.js file, detailing its purpose, dependencies, classes, and methods. Developers can refer to this summary to understand the functionality and structure of the file.",
    "src/components/LoginPage/LoginPage.css": "Description: This file defines the styling and layout for the login page of the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/components/LoginPage/LoginPage.js": "Description: This file represents the login page component of the application, responsible for rendering the login form and handling user authentication.\nDependencies: React, './LoginPage.css'\nFunctions:\n- Name: LoginPage\n  Description: A functional component that renders the login page UI.\n  Parameters: onLogin (function) - A callback function to be executed when the login button is clicked.\n  Returns: JSX - The rendered login page UI.\n\nNo additional functions or classes are contained in this file.",
    "src/components/Playlist/Playlist.css": "File Summary: Playlist.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the playlist component in the application. It defines the layout, colors, and responsiveness of the playlist display.\n\n  Dependencies: \n  - None\n\nClasses:\n\n  .Playlist:\n  - Purpose: Represents the main container for the playlist component.\n  - Attributes:\n    - display: flex;\n    - flex-direction: column;\n    - overflow-y: scroll;\n    - height: 100%;\n    - padding: 0.88rem 0.88rem;\n    - background-color: #1E1E20;\n\n  .Playlist-header:\n  - Purpose: Represents the header section of the playlist.\n  - Attributes:\n    - display: flex;\n    - align-items: center;\n    - margin-bottom: 1.5rem;\n\n  .Playlist-album:\n  - Purpose: Represents the album cover image in the playlist.\n  - Attributes:\n    - width: 6.875rem;\n    - height: auto;\n\n  .Playlist-info:\n  - Purpose: Represents the information section of the playlist.\n  - Attributes:\n    - display: flex;\n    - flex-direction: column;\n    - justify-content: flex-end;\n    - margin-left: 1rem;\n\n  .Playlist input:\n  - Purpose: Represents the input field in the playlist.\n  - Attributes:\n    - width: 100%;\n    - border: 0;\n    - outline: 0;\n    - margin-top: .5rem;\n    - background: transparent;\n    - font-family: 'Poppins', sans-serif;\n    - font-size: 2.5rem;\n    - color: white;\n\n  .Playlist-save:\n  - Purpose: Represents the save button in the playlist.\n  - Attributes:\n    - cursor: pointer;\n    - width: 10rem;\n    - padding: 0.77rem 0;\n    - margin-top: 0.3rem;\n    - border-radius: 54px;\n    - border-width: 0px;\n    - background-color: #1db954;\n    - text-align: center;\n    - font-size: 0.83rem;\n    - transition: background-color 0.25s;\n    - color: #fff;\n    - font-weight: 500;\n    - display: flex;\n    - align-items: center;\n    - justify-content: center;\n\nFunctions:\n\n  None\n\nThis file contains the CSS styling rules for the playlist component in the application. It defines the layout, colors, and responsiveness of various elements within the playlist, such as the header, album cover, input field, and save button. The styles are designed to create a visually appealing and user-friendly interface for the playlist feature.",
    "src/components/Playlist/Playlist.js": "Module Overview:\n\nPurpose: The Playlist module is responsible for rendering a playlist component within the application. It displays album art, playlist information, and a list of tracks.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- FontAwesomeIcon: A library for displaying icons in React components.\n\nClasses:\n\nPlaylist:\n- Purpose: Represents the playlist component that displays album art, playlist information, and tracks.\n- Attributes:\n  - loadingPlaylistName (bool): Indicates if the playlist name is currently being loaded.\n  - loadingAlbumArt (bool): Indicates if the album art is currently being loaded.\n- Methods:\n  - handleNameChange(event: Event) -> void: Updates the playlist name based on user input.\n\nFunctions:\nNone\n\nOverall, the Playlist module is crucial for displaying playlist information and tracks within the application, utilizing React components and FontAwesome icons for a visually appealing user interface.",
    "src/components/SearchBar/SearchBar.css": "File: SearchBar.css\n\nModule Overview:\n\n  Purpose: The SearchBar.css file contains styling rules for the search bar component in the application. It defines the layout, appearance, and behavior of the search bar.\n\n  Dependencies: \n  - None\n\nClasses:\n\n  SearchBar:\n  - Purpose: Represents the search bar component in the application.\n  - Attributes:\n    - None\n  - Methods:\n    - None\n\nFunctions:\n  - None\n\nOverall, the SearchBar.css file defines the styling for the search bar component, including the input field and search button. It provides responsive design for different screen sizes and ensures a consistent user experience across devices.",
    "src/components/SearchBar/SearchBar.js": "Module Overview:\n\nPurpose: The SearchBar module provides a search input component for users to input search terms and trigger a search action.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @fortawesome/free-solid-svg-icons: A library for accessing free solid icons.\n- @fortawesome/react-fontawesome: A library for using Font Awesome icons in React components.\n\nClasses:\n\nSearchBar:\n- Purpose: Represents a search input component with a search button.\n- Attributes:\n  - term (string): The current search term input by the user.\n- Methods:\n  - handleTermChange(event: Event) -> void: Updates the search term based on user input.\n  - search() -> void: Saves the search term to local storage and triggers the search action.\n  - handleKeyDown(event: KeyboardEvent) -> void: Triggers the search action when the Enter key is pressed.\n\nFunctions:\n- N/A\n\nOverall, the SearchBar module provides a user-friendly search input component that allows users to input search terms, save them for future use, and trigger a search action.",
    "src/components/SearchResults/SearchResults.css": "File: SearchResults.css\n\nModule Overview:\n\n  Purpose: This file defines the styling for the search results component in the application. It sets the overflow behavior, padding, background color, and height of the search results container.\n  Dependencies: None\n\nClasses:\n\n  .SearchResults:\n  - Purpose: Represents the styling for the search results container.\n  - Attributes:\n    - overflow-y: auto - Enables vertical scrolling when the content overflows.\n    - padding: 1rem - Adds padding around the content inside the container.\n    - background-color: #1E1E20 - Sets the background color of the container to a dark shade.\n    - height: 100% - Sets the height of the container to 100% of its parent element.\n\n::-webkit-scrollbar:\n  - Purpose: Styles the scrollbar for webkit browsers.\n  - Attributes:\n    - width: 0px - Hides the scrollbar.\n    - background: transparent - Sets the background of the scrollbar to transparent.\n\nFunctions: None\n\nThis file primarily focuses on defining the styling for the search results container in the application, ensuring a visually appealing and functional user interface for displaying search results.",
    "src/components/SearchResults/SearchResults.js": "Module Overview:\n\nPurpose: The SearchResults module is responsible for displaying search results for tracks and providing functionality to add tracks to a playlist. It also fetches more recommendations based on the top tracks.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- TrackList: A component for displaying a list of tracks.\n- Spotify: A utility module for making recommendations based on track IDs.\n\nClasses:\n\nSearchResults:\n- Purpose: Represents the component for displaying search results and managing track additions.\n- Attributes: \n  - props: Contains search results, current track, and functions for adding and toggling tracks.\n- Methods:\n  - addTopFive() -> void: Adds the top five tracks to the playlist.\n  - addTopTen() -> void: Adds the top ten tracks to the playlist.\n  - addAll() -> void: Adds all tracks to the playlist.\n  - fetchMoreRecommendations() -> Promise<void>: Fetches more recommendations based on the top 5 tracks.\n\nFunctions:\n- fetchMoreRecommendations():\n  - Purpose: Fetches more recommendations based on the top 5 tracks.\n  - Arguments: None\n  - Returns: Promise<void>\n  - Exceptions: Logs an error if there is an issue fetching recommendations.\n\nOverall, the SearchResults module is crucial for displaying search results, managing track additions, and fetching recommendations based on user interactions.",
    "src/components/Track/Track.css": "File Summary: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the Track component in the application. It defines the visual appearance and behavior of the Track component, including its actions and information display.\n\n  Dependencies: No external dependencies are listed in this file.\n\nClasses:\n\n  Track:\n  - Purpose: Represents a single track element in the application.\n  - Attributes:\n    - N/A\n  - Methods:\n    - N/A\n\n  Track-action:\n  - Purpose: Represents the action buttons associated with a track.\n  - Attributes:\n    - display: inline-flex\n    - align-items: center\n    - justify-content: center\n    - border-radius: 50%\n    - margin: 0 0.25rem\n    - border: 1px solid #c5c6c7\n    - background-color: #c5c6c7\n    - color: rgba(0, 0, 0, 1)\n    - font-size: 1.5rem\n    - transition: all 0.25s ease-in-out\n    - width: 1.5rem\n    - height: 1.5rem\n    - min-width: 1.5rem\n    - min-height: 1.5rem\n  - Methods:\n    - N/A\n\nFunctions:\n\n  N/A\n\nThis file primarily focuses on defining the styling rules for the Track component and its associated action buttons. It ensures a consistent and visually appealing design for the track elements in the application.",
    "src/components/Track/Track.js": "Module Overview:\n\n  Purpose: The Track module defines a React component that represents a track in a music player application. It handles adding, removing, and toggling tracks, as well as displaying track information and album art.\n\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @fortawesome/react-fontawesome: A library for using Font Awesome icons in React components.\n  - @fortawesome/free-solid-svg-icons: A collection of free solid icons for use with Font Awesome.\n  - Track.css: A CSS file for styling the Track component.\n\nClasses:\n\n  Track:\n  - Purpose: Represents a track in the music player application.\n  - Attributes:\n    - props: The properties passed to the Track component.\n    - currentTrack: The currently playing track.\n    - isRemoval: A boolean indicating if the track can be removed.\n    - track: The track data including name, artist, album, genre, image, and URI.\n  - Methods:\n    - addTrack(event: Event) -> void: Adds the track to the playlist and toggles play/pause if it is the current track.\n    - removeTrack(event: Event) -> void: Removes the track from the playlist and toggles play/pause if it is the current track.\n    - handleClick() -> void: Toggles play/pause for the track.\n    - renderAction() -> JSX.Element: Renders the add/remove button based on isRemoval.\n    - render() -> JSX.Element: Renders the Track component with track information, album art, play button, and add/remove button.\n\nFunctions:\nN/A\n\nOverall, the Track module provides a reusable component for displaying and interacting with individual tracks in a music player application. It handles track actions such as adding, removing, and toggling play/pause, as well as displaying track information and album art.",
    "src/components/TrackList/TrackList.css": "File: styles.css\n\nModule Overview:\n\n  Purpose: This file contains the styling rules for the TrackList component in the application.\n  Dependencies: None\n\nCSS Rules:\n\n  .TrackList {\n    - width: 100%;\n    - overflow-x: hidden;\n    - overflow-y: auto;\n    - scrollbar-width: thin;\n  }\n\nThis CSS rule defines the styling for the TrackList component, setting its width to 100% of its container, hiding horizontal overflow, enabling vertical overflow with a scrollbar, and setting the scrollbar width to thin.",
    "src/components/TrackList/TrackList.js": "Module Overview:\n\n  Purpose: The TrackList module is responsible for rendering a list of tracks in the application. It receives a list of tracks as a prop and maps over them to render individual Track components.\n\n  Dependencies: \n  - React: The JavaScript library for building user interfaces.\n  - Track: The Track component used to display individual tracks.\n  - TrackList.css: The CSS file for styling the TrackList component.\n\nClasses:\n\n  TrackList:\n  - Purpose: Represents a list of tracks to be displayed in the application.\n  - Attributes:\n    - tracks (array): An array of track objects to be rendered.\n    - onAdd (function): Function to add a track to a playlist.\n    - isRemoval (boolean): Indicates if the track can be removed from the playlist.\n    - onRemove (function): Function to remove a track from a playlist.\n    - onToggle (function): Function to toggle the current track.\n    - currentTrack (object): The currently selected track.\n  - Methods:\n    - render() -> JSX: Renders the TrackList component with the list of tracks and associated actions.\n\nFunctions:\n  N/A",
    "src/index.css": "Description: This file contains the CSS code for the body element of the application, setting the margin, padding, and font-family properties.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions or classes.\n  Parameters: None\n  Returns: None",
    "src/index.js": "Description: This file is responsible for rendering the main application component and registering a service worker for offline functionality.\n\nDependencies: React, ReactDOM, App component, registerServiceWorker module, index.css\n\nFunctions:\n- Name: ReactDOM.render\n  Description: Renders the App component to the root element of the HTML document.\n  Parameters: <App /> (React component) - The main application component, document.getElementById('root') (DOM element) - The root element of the HTML document.\n  Returns: None\n\n- Name: registerServiceWorker\n  Description: Registers a service worker for offline functionality.\n  Parameters: None\n  Returns: None",
    "src/registerServiceWorker.js": "Description: This file registers a service worker in production to serve assets from local cache, allowing the app to load faster on subsequent visits and providing offline capabilities.\n\nDependencies: None\n\nFunctions:\n- Name: register\n  Description: Registers the service worker if the environment is set to production and the browser supports service workers.\n  Parameters: None\n  Returns: None\n\n- Name: unregister\n  Description: Unregisters the service worker if the browser supports service workers.\n  Parameters: None\n  Returns: None",
    "src/util/OpenAI.test.js": "Description: This file contains a test suite for the \"interpretPrompt\" function in the \"OpenAiAPIRequest.js\" file, which is responsible for making API calls to the OpenAI chat completions endpoint and determining appropriate strategies based on the API response.\n\nDependencies: The file depends on the \"nock\" library for mocking HTTP requests and the \"DetermineAppropriateStrategies\" function from the \"OpenAiAPIRequest.js\" file.\n\nFunctions:\n- Name: interpretPrompt\n  Description: This function is responsible for making an API call to the OpenAI chat completions endpoint with a given prompt and returning an array of strategies based on the API response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: An array of strategies (array) - The strategies determined based on the API response.",
    "src/util/OpenAiAPIRequest.js": "File Summary: generateSongRecommendations.js\n\nModule Overview:\n\nPurpose: This module provides functions for generating song recommendations based on user input prompts using the OpenAI API.\n\nDependencies:\n- API_URL_COMPLETIONS: Endpoint for general completions from the OpenAI API.\n- API_URL_CHAT_COMPLETIONS: Endpoint for chat completions from the OpenAI API.\n- API_URL_IMAGE: Endpoint for generating images using the OpenAI API.\n- process.env.REACT_APP_MY_OPENAI_API_KEY: API key for accessing the OpenAI API.\n\nFunctions:\n\ngenerateAISongRecommendations:\n- Purpose: Generates song recommendations based on a user's search input by utilizing different strategies and calling the OpenAI API.\n- Arguments:\n  - userSearchInput (string): The user's search input for generating recommendations.\n- Returns:\n  - Array: An array of song recommendations in JSON format.\n- Exceptions:\n  - None\n\nDetermineAppropriateStrategies:\n- Purpose: Interprets the user's prompt to determine suitable strategies for generating music recommendations.\n- Arguments:\n  - userSearchInput (string): The user's search input for determining strategies.\n- Returns:\n  - Array: An array of suitable strategies based on the user's prompt.\n- Exceptions:\n  - None\n\ngenerateSongRecommendations:\n- Purpose: Generates song recommendations based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating song recommendations.\n- Returns:\n  - String: The response array of song recommendations.\n- Exceptions:\n  - None\n\ngeneratePlaylistName:\n- Purpose: Generates a playlist name based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating a playlist name.\n- Returns:\n  - String: The generated playlist name.\n- Exceptions:\n  - None\n\ngenerateImage:\n- Purpose: Generates an image based on a given prompt using the OpenAI API.\n- Arguments:\n  - prompt (string): The prompt for generating an image.\n- Returns:\n  - String: The URL of the generated image.\n- Exceptions:\n  - None\n\nDefault Export:\n- generateSongRecommendations, generatePlaylistName, generateImage, generateTotalSongRecommendations: Exports the functions for external use.\n\nThis file serves as a crucial component for generating song recommendations, determining strategies, and interacting with the OpenAI API to enhance user experience in the application.",
    "src/util/SoundCloud.js": "Description: This file is responsible for searching and retrieving playlists from the SoundCloud API based on a given search phrase, and writing the playlist and track data to a CSV file.\n\nDependencies: The file depends on the 'node-fetch' module for making HTTP requests to the SoundCloud API, and the 'csv-writer' module for writing data to a CSV file.\n\nFunctions:\n- Name: searchPlaylists\n  Description: Searches for playlists on SoundCloud based on a given search phrase, retrieves the playlist and track data, and writes it to a CSV file.\n  Parameters: searchPhrase (string) - The search phrase to be used for searching playlists on SoundCloud.\n  Returns: None",
    "src/util/Spotify.js": "File Summary: Spotify.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for interacting with the Spotify API to access user information, search for tracks, make recommendations, and save playlists.\n  Dependencies: \n  - process.env: Environment variables for configuration.\n  - window.location: Browser window location for handling access tokens.\n  - fetch: Web API for making HTTP requests.\n\nClasses:\n\n  Spotify:\n  - Purpose: Represents the Spotify API interaction methods.\n  - Attributes:\n    - clientId (str): Spotify client ID for authentication.\n    - awsPullRequestId (str): AWS pull request ID for preview URL.\n    - awsAppId (str): AWS app ID for preview URL.\n    - previewUri (str): Preview URL for the application.\n    - developmentProductionUri (str): Redirect URI for development/production.\n    - redirectUri (str): Final redirect URI for authentication.\n    - accessToken (str): Access token for API requests.\n  - Methods:\n    - getAccessToken() -> str: Retrieves and sets the access token.\n    - getUserInfo() -> Promise: Fetches user information from Spotify API.\n    - openAiSearch(term: object) -> Promise: Searches for tracks based on term.\n    - makeRecommendation(songId1, songId2, songId3, songId4, songId5) -> Promise: Generates track recommendations.\n    - savePlaylist(name, trackUris) -> Promise: Saves a playlist with specified tracks.\n    - logout() -> None: Logs out the user by clearing the access token.\n    - isLoggedIn() -> bool: Checks if the user is logged in.\n\nFunctions:\n\n  No standalone functions in this module.\n\nThis file serves as the main interface for interacting with the Spotify API, providing methods for authentication, user data retrieval, track searching, recommendation generation, playlist saving, and user session management.",
    "src/util/Spotify.test.js": "File Summary: Spotify.js\n\nModule Overview:\n\n  Purpose: The Spotify module provides functionality for interacting with the Spotify API to fetch music recommendations based on seed tracks.\n  Dependencies: \n  - jest: Testing framework for mocking fetch requests.\n  - global.fetch: Browser API for making HTTP requests.\n\nFunctions:\n\n  Spotify.makeRecommendation(seedTrackIds: string[]) -> Promise<object[]>:\n  - Purpose: Fetches music recommendations from the Spotify API based on seed track IDs and returns formatted track data.\n  - Arguments:\n    - seedTrackIds (string[]): An array of seed track IDs to base recommendations on.\n  - Returns:\n    - Promise<object[]>: An array of formatted track data objects.\n  - Exceptions:\n    - None\n\nClasses:\n\n  None\n\nOverall, the Spotify.js file is responsible for fetching music recommendations from the Spotify API based on seed tracks and returning formatted track data. It utilizes jest for testing and global.fetch for making HTTP requests.",
    "src/util/interpretPrompt.js": "Description: This file is responsible for making requests to the OpenAI API and interpreting the response.\nDependencies: OpenAiAPIRequest.js\nFunctions:\n- Name: interpretPrompt2\n  Description: Sends a prompt to the OpenAI API and interprets the response.\n  Parameters: prompt (string) - The prompt to be sent to the API.\n  Returns: response (string) - The interpreted response from the API."
}