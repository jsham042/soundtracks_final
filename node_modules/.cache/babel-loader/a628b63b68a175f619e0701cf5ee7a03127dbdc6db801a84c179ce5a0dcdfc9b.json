{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/joesh/IdeaProjects/soundtracks_final/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/joesh/IdeaProjects/soundtracks_final/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Information to reach API\nvar API_URL_COMPLETIONS = \"https://api.openai.com/v1/completions\";\nvar API_URL_CHAT_COMPLETIONS = \"https://api.openai.com/v1/chat/completions\";\nvar api_key = process.env.REACT_APP_MY_OPENAI_API_KEY; //API key that Joe got from registering the app\nvar API_URL_IMAGE = \"https://api.openai.com/v1/images/generations\";\n\n//Interprets prompt to determine which batch strategies make sense given the context of the prompt\nexport var interpretPrompt = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(prompt) {\n    var batchDescriptions, context, data, response, jsonResponse, responseContent, strategies;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          batchDescriptions = [\"1. Literal interpretation of the user's prompt\", \"2. Capturing the mood or theme implied by the user's prompt\", \"3. Selecting songs from different genres that would fit the context of the user's prompt\", \"4. Suggesting songs from different eras or time periods that align with the user's prompt\", \"5. Creative interpretation of the user's prompt\"];\n          context = \"The user is looking for song recommendations that are appropriate the following prompt: \".concat(prompt, \". \\n    Which of these strategies would be suitable for recommending music based on this prompt: \").concat(batchDescriptions, \"? \\n    List the suitable strategies in an array with the corresponding number for the batch description.\\n    For example, if the prompt is \\\"I'm feeling sad\\\", then the suitable strategies would be 1, 2, 3, and 5. And you would return [1, 2, 3, 5].\"); // run an api call to openai to generate the response\n          data = JSON.stringify({\n            model: \"gpt-4\",\n            messages: [{\n              role: \"system\",\n              content: \"You are a prompt interpreter. Based on a prompt you will categorize which music recommendation strategies to use.\"\n            }, {\n              role: \"user\",\n              content: context\n            }]\n          });\n          _context.prev = 3;\n          _context.next = 6;\n          return fetch(API_URL_CHAT_COMPLETIONS, {\n            method: \"POST\",\n            body: data,\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": \"Bearer \".concat(api_key)\n            }\n          });\n        case 6:\n          response = _context.sent;\n          if (!response.ok) {\n            _context.next = 15;\n            break;\n          }\n          _context.next = 10;\n          return response.json();\n        case 10:\n          jsonResponse = _context.sent;\n          responseContent = jsonResponse.choices[0].message.content; // Extract numbers from GPT-4's response\n          strategies = responseContent.match(/\\d+/g);\n          if (!(strategies !== null)) {\n            _context.next = 15;\n            break;\n          }\n          return _context.abrupt(\"return\", strategies.map(Number));\n        case 15:\n          _context.next = 20;\n          break;\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](3);\n          console.log(_context.t0);\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 17]]);\n  }));\n  return function interpretPrompt(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n//Asynchronous functions\nexport var generateSongRecommendations = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(prompt) {\n    var data, response, jsonResponse, responseArray, filteredResponse;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          data = JSON.stringify({\n            model: \"gpt-4\",\n            messages: [{\n              role: \"system\",\n              content: \"You are a music recommendation engine.\"\n            }, {\n              role: \"user\",\n              content: prompt\n            }]\n          });\n          _context2.prev = 1;\n          _context2.next = 4;\n          return fetch(API_URL_CHAT_COMPLETIONS, {\n            method: \"POST\",\n            body: data,\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": \"Bearer \".concat(api_key)\n            }\n          });\n        case 4:\n          response = _context2.sent;\n          if (!response.ok) {\n            _context2.next = 12;\n            break;\n          }\n          _context2.next = 8;\n          return response.json();\n        case 8:\n          jsonResponse = _context2.sent;\n          responseArray = jsonResponse.choices[0].message.content.split(/\\d+\\.\\s/g);\n          filteredResponse = responseArray.map(function (element) {\n            return element.replace(/\\n|\\d+\\./g, \"\").trim();\n          }).filter(function (element) {\n            return element !== \"\";\n          });\n          return _context2.abrupt(\"return\", filteredResponse);\n        case 12:\n          _context2.next = 17;\n          break;\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(_context2.t0);\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[1, 14]]);\n  }));\n  return function generateSongRecommendations(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var generatePlaylistName = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(prompt) {\n    var data, response, jsonResponse, textResponse;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          data = JSON.stringify({\n            model: \"text-davinci-003\",\n            prompt: prompt,\n            temperature: 0.5,\n            max_tokens: 500,\n            top_p: 1,\n            frequency_penalty: 0,\n            presence_penalty: 0\n          });\n          _context3.prev = 1;\n          _context3.next = 4;\n          return fetch(API_URL_COMPLETIONS, {\n            method: \"POST\",\n            body: data,\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": \"Bearer \".concat(api_key)\n            }\n          });\n        case 4:\n          response = _context3.sent;\n          if (!response.ok) {\n            _context3.next = 11;\n            break;\n          }\n          _context3.next = 8;\n          return response.json();\n        case 8:\n          jsonResponse = _context3.sent;\n          textResponse = jsonResponse.choices[0].text;\n          return _context3.abrupt(\"return\", textResponse);\n        case 11:\n          _context3.next = 16;\n          break;\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.log(_context3.t0);\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[1, 13]]);\n  }));\n  return function generatePlaylistName(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var generateImage = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(prompt) {\n    var data, response, jsonResponse;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          data = JSON.stringify({\n            \"model\": \"image-alpha-001\",\n            \"prompt\": prompt,\n            \"num_images\": 1,\n            \"size\": \"512x512\"\n          });\n          _context4.prev = 1;\n          _context4.next = 4;\n          return fetch(API_URL_IMAGE, {\n            method: \"POST\",\n            body: data,\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": \"Bearer \".concat(api_key)\n            }\n          });\n        case 4:\n          response = _context4.sent;\n          if (!response.ok) {\n            _context4.next = 17;\n            break;\n          }\n          _context4.next = 8;\n          return response.json();\n        case 8:\n          jsonResponse = _context4.sent;\n          if (!(jsonResponse && jsonResponse.data && jsonResponse.data.length > 0)) {\n            _context4.next = 13;\n            break;\n          }\n          return _context4.abrupt(\"return\", jsonResponse.data[0].url);\n        case 13:\n          console.error(\"Invalid response from OpenAI API\");\n          return _context4.abrupt(\"return\", null);\n        case 15:\n          _context4.next = 19;\n          break;\n        case 17:\n          console.error(\"Failed to generate image: \".concat(response.status));\n          return _context4.abrupt(\"return\", null);\n        case 19:\n          _context4.next = 25;\n          break;\n        case 21:\n          _context4.prev = 21;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.error(\"Error generating image: \".concat(_context4.t0));\n          return _context4.abrupt(\"return\", null);\n        case 25:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[1, 21]]);\n  }));\n  return function generateImage(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\ngenerateImage(\"Image of driving down the 101. Not containing text.\").then(function (albumArtUrl) {\n  console.log(albumArtUrl); // the URL of the generated album art\n  // you can now set the state of the album art URL to `albumArtUrl`\n}).catch(function (error) {\n  console.error(error);\n});\nexport default {\n  generateSongRecommendations: generateSongRecommendations,\n  generatePlaylistName: generatePlaylistName,\n  generateImage: generateImage,\n  interpretPrompt: interpretPrompt\n};","map":{"version":3,"names":["API_URL_COMPLETIONS","API_URL_CHAT_COMPLETIONS","api_key","process","env","REACT_APP_MY_OPENAI_API_KEY","API_URL_IMAGE","interpretPrompt","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","prompt","batchDescriptions","context","data","response","jsonResponse","responseContent","strategies","wrap","_callee$","_context","prev","next","concat","JSON","stringify","model","messages","role","content","fetch","method","body","headers","sent","ok","json","choices","message","match","abrupt","map","Number","t0","console","log","stop","_x","apply","arguments","generateSongRecommendations","_ref2","_callee2","responseArray","filteredResponse","_callee2$","_context2","split","element","replace","trim","filter","_x2","generatePlaylistName","_ref3","_callee3","textResponse","_callee3$","_context3","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","text","_x3","generateImage","_ref4","_callee4","_callee4$","_context4","length","url","error","status","_x4","then","albumArtUrl","catch"],"sources":["C:/Users/joesh/IdeaProjects/soundtracks_final/src/util/OpenAiAPIRequest.js"],"sourcesContent":["// Information to reach API\r\nconst API_URL_COMPLETIONS = \"https://api.openai.com/v1/completions\";\r\nconst API_URL_CHAT_COMPLETIONS = \"https://api.openai.com/v1/chat/completions\";\r\nconst api_key = process.env.REACT_APP_MY_OPENAI_API_KEY;//API key that Joe got from registering the app\r\nconst API_URL_IMAGE = \"https://api.openai.com/v1/images/generations\";\r\n\r\n//Interprets prompt to determine which batch strategies make sense given the context of the prompt\r\nexport const interpretPrompt = async (prompt) => {\r\n    const batchDescriptions = [\r\n        \"1. Literal interpretation of the user's prompt\",\r\n        \"2. Capturing the mood or theme implied by the user's prompt\",\r\n        \"3. Selecting songs from different genres that would fit the context of the user's prompt\",\r\n        \"4. Suggesting songs from different eras or time periods that align with the user's prompt\",\r\n        \"5. Creative interpretation of the user's prompt\",\r\n    ];\r\n    const context =\r\n    `The user is looking for song recommendations that are appropriate the following prompt: ${prompt}. \r\n    Which of these strategies would be suitable for recommending music based on this prompt: ${batchDescriptions}? \r\n    List the suitable strategies in an array with the corresponding number for the batch description.\r\n    For example, if the prompt is \"I'm feeling sad\", then the suitable strategies would be 1, 2, 3, and 5. And you would return [1, 2, 3, 5].`;\r\n    // run an api call to openai to generate the response\r\n    const data = JSON.stringify({\r\n        model: \"gpt-4\",\r\n        messages: [{\r\n            role: \"system\",\r\n            content: \"You are a prompt interpreter. Based on a prompt you will categorize which music recommendation strategies to use.\"\r\n        }, {\r\n            role: \"user\",\r\n            content: context\r\n        }],\r\n    });\r\n    try {\r\n        const response = await fetch(API_URL_CHAT_COMPLETIONS, {\r\n            method: \"POST\",\r\n            body: data,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${api_key}`\r\n            }\r\n        });\r\n\r\n        if (response.ok) {\r\n            const jsonResponse = await response.json();\r\n            const responseContent = jsonResponse.choices[0].message.content;\r\n            // Extract numbers from GPT-4's response\r\n            const strategies = responseContent.match(/\\d+/g);\r\n            if (strategies !== null) {\r\n                return strategies.map(Number);\r\n            }\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n//Asynchronous functions\r\nexport const generateSongRecommendations = async (prompt) => {\r\n    const data = JSON.stringify({\r\n        model: \"gpt-4\",\r\n        messages: [{\r\n            role: \"system\",\r\n            content: \"You are a music recommendation engine.\"\r\n        }, {\r\n            role: \"user\",\r\n            content: prompt\r\n        }],\r\n    });\r\n\r\n    try {\r\n        const response = await fetch(API_URL_CHAT_COMPLETIONS, {\r\n            method: \"POST\",\r\n            body: data,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${api_key}`\r\n            }\r\n        });\r\n\r\n        if (response.ok) {\r\n            const jsonResponse = await response.json();\r\n            const responseArray = jsonResponse.choices[0].message.content.split(/\\d+\\.\\s/g);\r\n            const filteredResponse = responseArray.map((element) => {\r\n                return element.replace(/\\n|\\d+\\./g, \"\").trim();\r\n            }).filter((element) => element !== \"\");\r\n            return (filteredResponse);\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const generatePlaylistName = async(prompt) => {\r\n    const data = JSON.stringify({\r\n        model: \"text-davinci-003\",\r\n        prompt: prompt,\r\n        temperature: 0.5,\r\n        max_tokens: 500,\r\n        top_p: 1,\r\n        frequency_penalty: 0,\r\n        presence_penalty: 0\r\n    });\r\n\r\n    try {\r\n        const response = await fetch(API_URL_COMPLETIONS, {\r\n            method: \"POST\",\r\n            body: data,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${api_key}`\r\n            }\r\n        });\r\n        if(response.ok){\r\n            const jsonResponse = await response.json();\r\n            const textResponse = jsonResponse.choices[0].text\r\n            return(textResponse);\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const generateImage = async (prompt) => {\r\n    const data = JSON.stringify({\r\n        \"model\": \"image-alpha-001\",\r\n        \"prompt\": prompt,\r\n        \"num_images\": 1,\r\n        \"size\": \"512x512\",\r\n    });\r\n\r\n    try {\r\n        const response = await fetch(API_URL_IMAGE, {\r\n            method: \"POST\",\r\n            body: data,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${api_key}`\r\n            }\r\n        });\r\n        if (response.ok) {\r\n            const jsonResponse = await response.json();\r\n            if (jsonResponse && jsonResponse.data && jsonResponse.data.length > 0) {\r\n                return jsonResponse.data[0].url;\r\n            } else {\r\n                console.error(\"Invalid response from OpenAI API\");\r\n                return null;\r\n            }\r\n        } else {\r\n            console.error(`Failed to generate image: ${response.status}`);\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error generating image: ${error}`);\r\n        return null;\r\n    }\r\n}\r\n\r\ngenerateImage(`Image of driving down the 101. Not containing text.`)\r\n    .then(albumArtUrl => {\r\n        console.log(albumArtUrl); // the URL of the generated album art\r\n        // you can now set the state of the album art URL to `albumArtUrl`\r\n    })\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n\r\n\r\nexport default {generateSongRecommendations, generatePlaylistName, generateImage, interpretPrompt};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}